'use client'

import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'

import {
  Loader2,
  ArrowLeft,
  Clock,
  Globe,
  Save,
  AlertCircle,
  CheckCircle,
  Languages
} from 'lucide-react'
import { toast } from 'sonner'

import { LanguageSelector } from '@/components/blocks/freelancers/language-selector'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { useSession } from '@/hooks/use-session'

interface TimeSlot {
  day: string
  startTime: string
  endTime: string
  isAvailable: boolean
}

const daysOfWeek = [
  'Monday',
  'Tuesday',
  'Wednesday',
  'Thursday',
  'Friday',
  'Saturday',
  'Sunday'
]

const timezones = [
  'UTC',
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'America/Sao_Paulo',
  'Europe/London',
  'Europe/Paris',
  'Europe/Berlin',
  'Europe/Moscow',
  'Asia/Dubai',
  'Asia/Kolkata',
  'Asia/Singapore',
  'Asia/Tokyo',
  'Asia/Shanghai',
  'Australia/Sydney'
]

export default function AvailabilityManagementPage() {
  const router = useRouter()
  const { user: session, isLoading: sessionLoading } = useSession()
  const [availabilityStatus, setAvailabilityStatus] =
    useState<string>('available')
  const [timezone, setTimezone] = useState<string>('UTC')
  const [weeklyAvailability, setWeeklyAvailability] = useState<TimeSlot[]>([])
  const [languages, setLanguages] = useState<any[]>([])
  const [hoursPerWeek, setHoursPerWeek] = useState<number>(40)
  const [responseTime, setResponseTime] = useState<string>('24_hours')
  const [vacationMode, setVacationMode] = useState<boolean>(false)
  const [vacationEndDate, setVacationEndDate] = useState<string>('')
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [hasChanges, setHasChanges] = useState(false)

  useEffect(() => {
    if (!sessionLoading && !session) {
      router.push('/login')
    }
  }, [session, sessionLoading, router])

  useEffect(() => {
    const fetchAvailability = async () => {
      if (!session) return

      try {
        const response = await fetch('/api/freelancer/availability')
        if (!response.ok) {
          if (response.status === 404) {
            // Initialize default availability
            const defaultSlots = daysOfWeek.map(day => ({
              day,
              startTime: day === 'Saturday' || day === 'Sunday' ? '' : '09:00',
              endTime: day === 'Saturday' || day === 'Sunday' ? '' : '17:00',
              isAvailable: day !== 'Saturday' && day !== 'Sunday'
            }))
            setWeeklyAvailability(defaultSlots)
            setIsLoading(false)
            return
          }
          throw new Error('Failed to fetch availability')
        }

        const data = await response.json()
        setAvailabilityStatus(data.availabilityStatus || 'available')
        setTimezone(data.timezone || 'UTC')
        setWeeklyAvailability(data.weeklyAvailability || [])
        setLanguages(data.languages || [])
        setHoursPerWeek(data.hoursPerWeek || 40)
        setResponseTime(data.responseTime || '24_hours')
        setVacationMode(data.vacationMode || false)
        setVacationEndDate(data.vacationEndDate || '')
      } catch (_error) {
        console.error('Error fetching availability:', error)
        toast.error('Failed to load availability settings')
      } finally {
        setIsLoading(false)
      }
    }

    if (session) {
      fetchAvailability()
    }
  }, [session])

  const handleTimeSlotChange = (
    dayIndex: number,
    field: string,
    value: any
  ) => {
    const updatedSlots = [...weeklyAvailability]
    updatedSlots[dayIndex] = {
      ...updatedSlots[dayIndex],
      [field]: value
    }
    setWeeklyAvailability(updatedSlots)
    setHasChanges(true)
  }

  const handleApplyToAll = (field: 'weekdays' | 'weekend' | 'all') => {
    const updatedSlots = [...weeklyAvailability]
    const weekdaySlot = updatedSlots.find(s => s.day === 'Monday')

    if (!weekdaySlot) return

    updatedSlots.forEach((slot, index) => {
      const isWeekend = slot.day === 'Saturday' || slot.day === 'Sunday'

      if (
        field === 'all' ||
        (field === 'weekdays' && !isWeekend) ||
        (field === 'weekend' && isWeekend)
      ) {
        updatedSlots[index] = {
          ...slot,
          startTime: weekdaySlot.startTime,
          endTime: weekdaySlot.endTime,
          isAvailable: weekdaySlot.isAvailable
        }
      }
    })

    setWeeklyAvailability(updatedSlots)
    setHasChanges(true)
  }

  const handleSave = async () => {
    setIsSaving(true)
    try {
      const response = await fetch('/api/freelancer/availability', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          availabilityStatus,
          timezone,
          weeklyAvailability,
          languages,
          hoursPerWeek,
          responseTime,
          vacationMode,
          vacationEndDate
        })
      })

      if (!response.ok) {
        throw new Error('Failed to update availability')
      }

      toast.success('Availability settings updated successfully')
      setHasChanges(false)
    } catch (_error) {
      console.error('Error updating availability:', error)
      toast.error('Failed to update availability settings')
    } finally {
      setIsSaving(false)
    }
  }

  if (sessionLoading || isLoading) {
    return (
      <div className='flex min-h-screen items-center justify-center'>
        <Loader2 className='h-8 w-8 animate-spin' />
      </div>
    )
  }

  if (!session) {
    return null
  }

  return (
    <div className='container mx-auto max-w-6xl px-4 py-8'>
      <div className='mb-8'>
        <div className='mb-4 flex items-center gap-4'>
          <Button variant='ghost' size='icon' asChild>
            <Link href='/profile/freelancer'>
              <ArrowLeft className='h-4 w-4' />
            </Link>
          </Button>
          <div>
            <h1 className='text-3xl font-bold'>Availability Settings</h1>
            <p className='text-muted-foreground mt-1'>
              Manage your work schedule and availability
            </p>
          </div>
        </div>
      </div>

      <div className='grid gap-6 lg:grid-cols-3'>
        <div className='space-y-6 lg:col-span-2'>
          <Card>
            <CardHeader>
              <CardTitle>Current Status</CardTitle>
              <CardDescription>
                Let clients know your current availability
              </CardDescription>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='space-y-2'>
                <Label htmlFor='status'>Availability Status</Label>
                <Select
                  value={availabilityStatus}
                  onValueChange={value => {
                    setAvailabilityStatus(value)
                    setHasChanges(true)
                  }}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='available'>
                      <div className='flex items-center gap-2'>
                        <CheckCircle className='h-4 w-4 text-green-500' />
                        Available for Work
                      </div>
                    </SelectItem>
                    <SelectItem value='busy'>
                      <div className='flex items-center gap-2'>
                        <AlertCircle className='h-4 w-4 text-yellow-500' />
                        Busy (Limited Availability)
                      </div>
                    </SelectItem>
                    <SelectItem value='away'>
                      <div className='flex items-center gap-2'>
                        <AlertCircle className='h-4 w-4 text-red-500' />
                        Not Available
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className='space-y-2'>
                <Label htmlFor='hours'>Hours per Week</Label>
                <Input
                  id='hours'
                  type='number'
                  min='0'
                  max='168'
                  value={hoursPerWeek}
                  onChange={e => {
                    setHoursPerWeek(parseInt(e.target.value))
                    setHasChanges(true)
                  }}
                />
              </div>

              <div className='space-y-2'>
                <Label htmlFor='response'>Typical Response Time</Label>
                <Select
                  value={responseTime}
                  onValueChange={value => {
                    setResponseTime(value)
                    setHasChanges(true)
                  }}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='1_hour'>Within 1 hour</SelectItem>
                    <SelectItem value='2_hours'>Within 2 hours</SelectItem>
                    <SelectItem value='12_hours'>Within 12 hours</SelectItem>
                    <SelectItem value='24_hours'>Within 24 hours</SelectItem>
                    <SelectItem value='2_days'>Within 2 days</SelectItem>
                    <SelectItem value='1_week'>Within 1 week</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className='flex items-center justify-between rounded-lg border p-4'>
                <div className='space-y-0.5'>
                  <Label htmlFor='vacation'>Vacation Mode</Label>
                  <p className='text-muted-foreground text-sm'>
                    Temporarily pause all job notifications
                  </p>
                </div>
                <Switch
                  id='vacation'
                  checked={vacationMode}
                  onCheckedChange={checked => {
                    setVacationMode(checked)
                    setHasChanges(true)
                  }}
                />
              </div>

              {vacationMode && (
                <div className='space-y-2'>
                  <Label htmlFor='vacationEnd'>Vacation End Date</Label>
                  <Input
                    id='vacationEnd'
                    type='date'
                    value={vacationEndDate}
                    onChange={e => {
                      setVacationEndDate(e.target.value)
                      setHasChanges(true)
                    }}
                  />
                </div>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Weekly Schedule</CardTitle>
              <CardDescription>
                Set your typical working hours for each day
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className='space-y-4'>
                <div className='flex gap-2'>
                  <Button
                    variant='outline'
                    size='sm'
                    onClick={() => handleApplyToAll('weekdays')}
                  >
                    Apply to Weekdays
                  </Button>
                  <Button
                    variant='outline'
                    size='sm'
                    onClick={() => handleApplyToAll('weekend')}
                  >
                    Apply to Weekend
                  </Button>
                  <Button
                    variant='outline'
                    size='sm'
                    onClick={() => handleApplyToAll('all')}
                  >
                    Apply to All
                  </Button>
                </div>

                {weeklyAvailability.map((slot, index) => (
                  <div key={slot.day} className='flex items-center gap-4'>
                    <div className='w-24'>
                      <span className='text-sm font-medium'>{slot.day}</span>
                    </div>
                    <Switch
                      checked={slot.isAvailable}
                      onCheckedChange={checked =>
                        handleTimeSlotChange(index, 'isAvailable', checked)
                      }
                    />
                    {slot.isAvailable && (
                      <>
                        <Input
                          type='time'
                          value={slot.startTime}
                          onChange={e =>
                            handleTimeSlotChange(
                              index,
                              'startTime',
                              e.target.value
                            )
                          }
                          className='w-28'
                        />
                        <span className='text-sm'>to</span>
                        <Input
                          type='time'
                          value={slot.endTime}
                          onChange={e =>
                            handleTimeSlotChange(
                              index,
                              'endTime',
                              e.target.value
                            )
                          }
                          className='w-28'
                        />
                      </>
                    )}
                    {!slot.isAvailable && (
                      <span className='text-muted-foreground text-sm'>
                        Not Available
                      </span>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Languages</CardTitle>
              <CardDescription>
                Languages you can communicate in with clients
              </CardDescription>
            </CardHeader>
            <CardContent>
              <LanguageSelector
                languages={languages}
                onChange={langs => {
                  setLanguages(langs)
                  setHasChanges(true)
                }}
              />
            </CardContent>
          </Card>
        </div>

        <div className='space-y-6'>
          <Card>
            <CardHeader>
              <CardTitle>Time Zone</CardTitle>
            </CardHeader>
            <CardContent>
              <Select
                value={timezone}
                onValueChange={value => {
                  setTimezone(value)
                  setHasChanges(true)
                }}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {timezones.map(tz => (
                    <SelectItem key={tz} value={tz}>
                      {tz}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <p className='text-muted-foreground mt-2 text-xs'>
                Your local time zone for scheduling
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Availability Summary</CardTitle>
            </CardHeader>
            <CardContent className='space-y-3'>
              <div className='flex items-center justify-between'>
                <span className='text-sm'>Status</span>
                <Badge
                  variant={
                    availabilityStatus === 'available'
                      ? 'success'
                      : availabilityStatus === 'busy'
                        ? 'warning'
                        : 'secondary'
                  }
                >
                  {availabilityStatus}
                </Badge>
              </div>
              <div className='flex items-center justify-between'>
                <span className='text-sm'>Hours/Week</span>
                <span className='font-medium'>{hoursPerWeek}</span>
              </div>
              <div className='flex items-center justify-between'>
                <span className='text-sm'>Response Time</span>
                <span className='font-medium'>
                  {responseTime.replace('_', ' ')}
                </span>
              </div>
              <div className='flex items-center justify-between'>
                <span className='text-sm'>Languages</span>
                <span className='font-medium'>{languages.length}</span>
              </div>
              {vacationMode && (
                <div className='rounded-lg bg-yellow-50 p-3'>
                  <p className='text-sm text-yellow-800'>
                    Vacation mode is enabled
                    {vacationEndDate && (
                      <span className='mt-1 block text-xs'>
                        Until {new Date(vacationEndDate).toLocaleDateString()}
                      </span>
                    )}
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Tips</CardTitle>
            </CardHeader>
            <CardContent className='space-y-3'>
              <div className='flex items-start gap-2'>
                <Clock className='mt-0.5 h-4 w-4 text-blue-500' />
                <div className='text-sm'>
                  <p className='font-medium'>Set realistic hours</p>
                  <p className='text-muted-foreground'>
                    Be honest about your availability to manage client
                    expectations
                  </p>
                </div>
              </div>
              <div className='flex items-start gap-2'>
                <Globe className='mt-0.5 h-4 w-4 text-green-500' />
                <div className='text-sm'>
                  <p className='font-medium'>Update your timezone</p>
                  <p className='text-muted-foreground'>
                    Helps clients schedule meetings at convenient times
                  </p>
                </div>
              </div>
              <div className='flex items-start gap-2'>
                <Languages className='mt-0.5 h-4 w-4 text-purple-500' />
                <div className='text-sm'>
                  <p className='font-medium'>List all languages</p>
                  <p className='text-muted-foreground'>
                    More languages mean more opportunities
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      <div className='mt-6 flex items-center justify-end gap-4'>
        <Button
          variant='outline'
          onClick={() => router.push('/profile/freelancer')}
        >
          Cancel
        </Button>
        <Button onClick={handleSave} disabled={isSaving || !hasChanges}>
          {isSaving ? (
            <Loader2 className='mr-2 h-4 w-4 animate-spin' />
          ) : (
            <Save className='mr-2 h-4 w-4' />
          )}
          Save Changes
        </Button>
      </div>
    </div>
  )
}
