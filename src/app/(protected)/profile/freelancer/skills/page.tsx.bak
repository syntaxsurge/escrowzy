'use client'

import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'

import {
  Loader2,
  ArrowLeft,
  Plus,
  Trash2,
  Edit,
  Award,
  TrendingUp,
  Star,
  CheckCircle
} from 'lucide-react'
import { toast } from 'sonner'

import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from '@/components/ui/card'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { useSession } from '@/hooks/use-session'

interface Skill {
  id: string
  name: string
  category: string
  yearsOfExperience?: number
  skillLevel?: 'beginner' | 'intermediate' | 'expert'
  verified?: boolean
}

interface _SkillCategory {
  name: string
  skills: Skill[]
}

export default function SkillsManagementPage() {
  const router = useRouter()
  const { user: session, isLoading: sessionLoading } = useSession()
  const [skills, setSkills] = useState<Skill[]>([])
  const [allSkills, setAllSkills] = useState<Skill[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [editingSkill, setEditingSkill] = useState<Skill | null>(null)
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false)

  useEffect(() => {
    if (!sessionLoading && !session) {
      router.push('/login')
    }
  }, [session, sessionLoading, router])

  useEffect(() => {
    const fetchSkills = async () => {
      if (!session) return

      try {
        const [profileResponse, skillsResponse] = await Promise.all([
          fetch('/api/freelancer/profile'),
          fetch('/api/skills')
        ])

        if (!profileResponse.ok) {
          if (profileResponse.status === 404) {
            router.push('/profile/freelancer/setup')
            return
          }
          throw new Error('Failed to fetch profile')
        }

        const profileData = await profileResponse.json()
        const skillsData = await skillsResponse.json()

        setSkills(profileData.profile.freelancerSkills || [])
        setAllSkills(skillsData.skills || [])
      } catch (_error) {
        console.error('Error fetching skills:', error)
        toast.error('Failed to load skills')
      } finally {
        setIsLoading(false)
      }
    }

    if (session) {
      fetchSkills()
    }
  }, [session, router])

  const handleAddSkill = async (skill: Skill) => {
    setIsSaving(true)
    try {
      const response = await fetch('/api/freelancer/skills', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(skill)
      })

      if (!response.ok) {
        throw new Error('Failed to add skill')
      }

      const newSkill = await response.json()
      setSkills([...skills, newSkill])
      toast.success('Skill added successfully')
      setIsAddDialogOpen(false)
    } catch (_error) {
      console.error('Error adding skill:', error)
      toast.error('Failed to add skill')
    } finally {
      setIsSaving(false)
    }
  }

  const handleUpdateSkill = async (skill: Skill) => {
    setIsSaving(true)
    try {
      const response = await fetch(`/api/freelancer/skills/${skill.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(skill)
      })

      if (!response.ok) {
        throw new Error('Failed to update skill')
      }

      const updatedSkill = await response.json()
      setSkills(skills.map(s => (s.id === skill.id ? updatedSkill : s)))
      toast.success('Skill updated successfully')
      setEditingSkill(null)
    } catch (_error) {
      console.error('Error updating skill:', error)
      toast.error('Failed to update skill')
    } finally {
      setIsSaving(false)
    }
  }

  const handleRemoveSkill = async (skillId: string) => {
    if (!confirm('Are you sure you want to remove this skill?')) return

    setIsSaving(true)
    try {
      const response = await fetch(`/api/freelancer/skills/${skillId}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Failed to remove skill')
      }

      setSkills(skills.filter(s => s.id !== skillId))
      toast.success('Skill removed successfully')
    } catch (_error) {
      console.error('Error removing skill:', error)
      toast.error('Failed to remove skill')
    } finally {
      setIsSaving(false)
    }
  }

  const groupedSkills = skills.reduce(
    (acc, skill) => {
      const category = skill.category || 'Other'
      if (!acc[category]) {
        acc[category] = []
      }
      acc[category].push(skill)
      return acc
    },
    {} as Record<string, Skill[]>
  )

  const categories = ['all', ...Object.keys(groupedSkills)]

  const filteredSkills = skills.filter(skill => {
    const matchesSearch = skill.name
      .toLowerCase()
      .includes(searchTerm.toLowerCase())
    const matchesCategory =
      selectedCategory === 'all' || skill.category === selectedCategory
    return matchesSearch && matchesCategory
  })

  const getSkillLevelColor = (level?: string) => {
    switch (level) {
      case 'expert':
        return 'text-green-600 bg-green-50'
      case 'intermediate':
        return 'text-blue-600 bg-blue-50'
      case 'beginner':
        return 'text-gray-600 bg-gray-50'
      default:
        return 'text-gray-500 bg-gray-50'
    }
  }

  if (sessionLoading || isLoading) {
    return (
      <div className='flex min-h-screen items-center justify-center'>
        <Loader2 className='h-8 w-8 animate-spin' />
      </div>
    )
  }

  if (!session) {
    return null
  }

  return (
    <div className='container mx-auto max-w-6xl px-4 py-8'>
      <div className='mb-8'>
        <div className='mb-4 flex items-center gap-4'>
          <Button variant='ghost' size='icon' asChild>
            <Link href='/profile/freelancer'>
              <ArrowLeft className='h-4 w-4' />
            </Link>
          </Button>
          <div>
            <h1 className='text-3xl font-bold'>Skills Management</h1>
            <p className='text-muted-foreground mt-1'>
              Manage your professional skills and expertise
            </p>
          </div>
        </div>
      </div>

      <div className='grid gap-6 lg:grid-cols-3'>
        <div className='space-y-6 lg:col-span-2'>
          <Card>
            <CardHeader>
              <div className='flex items-center justify-between'>
                <div>
                  <CardTitle>Your Skills</CardTitle>
                  <CardDescription>
                    {skills.length} skills in your profile
                  </CardDescription>
                </div>
                <Dialog
                  open={isAddDialogOpen}
                  onOpenChange={setIsAddDialogOpen}
                >
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className='mr-2 h-4 w-4' />
                      Add Skill
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Add New Skill</DialogTitle>
                      <DialogDescription>
                        Search and add a skill to your profile
                      </DialogDescription>
                    </DialogHeader>
                    <div className='space-y-4 py-4'>
                      <div className='space-y-2'>
                        <Label>Search Skills</Label>
                        <Input
                          placeholder='Type to search...'
                          value={searchTerm}
                          onChange={e => setSearchTerm(e.target.value)}
                        />
                      </div>
                      <div className='max-h-60 space-y-2 overflow-y-auto'>
                        {allSkills
                          .filter(
                            s =>
                              s.name
                                .toLowerCase()
                                .includes(searchTerm.toLowerCase()) &&
                              !skills.some(existing => existing.id === s.id)
                          )
                          .map(skill => (
                            <button
                              key={skill.id}
                              onClick={() => handleAddSkill(skill)}
                              className='hover:bg-accent w-full rounded-lg border p-3 text-left transition-colors'
                            >
                              <p className='font-medium'>{skill.name}</p>
                              <p className='text-muted-foreground text-sm'>
                                {skill.category}
                              </p>
                            </button>
                          ))}
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </CardHeader>
            <CardContent>
              <div className='mb-4 flex gap-2'>
                <div className='flex-1'>
                  <Input
                    placeholder='Search skills...'
                    value={searchTerm}
                    onChange={e => setSearchTerm(e.target.value)}
                    className='w-full'
                  />
                </div>
                <Select
                  value={selectedCategory}
                  onValueChange={setSelectedCategory}
                >
                  <SelectTrigger className='w-[180px]'>
                    <SelectValue placeholder='Category' />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map(cat => (
                      <SelectItem key={cat} value={cat}>
                        {cat === 'all' ? 'All Categories' : cat}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {filteredSkills.length > 0 ? (
                <div className='space-y-3'>
                  {filteredSkills.map(skill => (
                    <div
                      key={skill.id}
                      className='hover:bg-accent/50 flex items-center justify-between rounded-lg border p-4 transition-colors'
                    >
                      <div className='flex-1'>
                        <div className='flex items-center gap-2'>
                          <p className='font-medium'>{skill.name}</p>
                          {skill.verified && (
                            <CheckCircle className='h-4 w-4 text-green-500' />
                          )}
                        </div>
                        <div className='mt-1 flex items-center gap-4'>
                          <span className='text-muted-foreground text-sm'>
                            {skill.category}
                          </span>
                          {skill.yearsOfExperience && (
                            <span className='text-muted-foreground text-sm'>
                              {skill.yearsOfExperience} years
                            </span>
                          )}
                          {skill.skillLevel && (
                            <Badge
                              className={getSkillLevelColor(skill.skillLevel)}
                            >
                              {skill.skillLevel}
                            </Badge>
                          )}
                        </div>
                      </div>
                      <div className='flex items-center gap-2'>
                        <Button
                          variant='ghost'
                          size='icon'
                          onClick={() => setEditingSkill(skill)}
                        >
                          <Edit className='h-4 w-4' />
                        </Button>
                        <Button
                          variant='ghost'
                          size='icon'
                          onClick={() => handleRemoveSkill(skill.id)}
                          disabled={isSaving}
                        >
                          <Trash2 className='h-4 w-4' />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className='py-12 text-center'>
                  <Award className='text-muted-foreground mx-auto h-12 w-12' />
                  <p className='text-muted-foreground mt-2 text-sm'>
                    {searchTerm || selectedCategory !== 'all'
                      ? 'No skills found matching your criteria'
                      : 'No skills added yet'}
                  </p>
                  {skills.length === 0 && (
                    <Button
                      className='mt-4'
                      onClick={() => setIsAddDialogOpen(true)}
                    >
                      Add Your First Skill
                    </Button>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        <div className='space-y-6'>
          <Card>
            <CardHeader>
              <CardTitle>Skill Statistics</CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <div className='space-y-2'>
                <div className='flex items-center justify-between'>
                  <span className='text-sm'>Total Skills</span>
                  <span className='font-semibold'>{skills.length}</span>
                </div>
              </div>
              <div className='space-y-2'>
                <div className='flex items-center justify-between'>
                  <span className='text-sm'>Expert Level</span>
                  <span className='font-semibold'>
                    {skills.filter(s => s.skillLevel === 'expert').length}
                  </span>
                </div>
              </div>
              <div className='space-y-2'>
                <div className='flex items-center justify-between'>
                  <span className='text-sm'>Verified Skills</span>
                  <span className='font-semibold'>
                    {skills.filter(s => s.verified).length}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Skill Categories</CardTitle>
            </CardHeader>
            <CardContent>
              <div className='space-y-2'>
                {Object.entries(groupedSkills).map(
                  ([category, categorySkills]) => (
                    <div
                      key={category}
                      className='flex items-center justify-between py-2'
                    >
                      <span className='text-sm'>{category}</span>
                      <Badge variant='secondary'>{categorySkills.length}</Badge>
                    </div>
                  )
                )}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Tips</CardTitle>
            </CardHeader>
            <CardContent className='space-y-3'>
              <div className='flex items-start gap-2'>
                <Star className='mt-0.5 h-4 w-4 text-yellow-500' />
                <div className='text-sm'>
                  <p className='font-medium'>Add relevant skills</p>
                  <p className='text-muted-foreground'>
                    Focus on skills that match your target projects
                  </p>
                </div>
              </div>
              <div className='flex items-start gap-2'>
                <TrendingUp className='mt-0.5 h-4 w-4 text-green-500' />
                <div className='text-sm'>
                  <p className='font-medium'>Update experience levels</p>
                  <p className='text-muted-foreground'>
                    Keep your skill levels current as you grow
                  </p>
                </div>
              </div>
              <div className='flex items-start gap-2'>
                <CheckCircle className='mt-0.5 h-4 w-4 text-blue-500' />
                <div className='text-sm'>
                  <p className='font-medium'>Get verified</p>
                  <p className='text-muted-foreground'>
                    Complete projects to verify your skills
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {editingSkill && (
        <Dialog
          open={!!editingSkill}
          onOpenChange={() => setEditingSkill(null)}
        >
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Edit Skill</DialogTitle>
              <DialogDescription>
                Update your experience and proficiency level
              </DialogDescription>
            </DialogHeader>
            <div className='space-y-4 py-4'>
              <div className='space-y-2'>
                <Label>Skill Name</Label>
                <Input value={editingSkill.name} disabled />
              </div>
              <div className='space-y-2'>
                <Label>Years of Experience</Label>
                <Input
                  type='number'
                  min='0'
                  max='50'
                  value={editingSkill.yearsOfExperience || 0}
                  onChange={e =>
                    setEditingSkill({
                      ...editingSkill,
                      yearsOfExperience: parseInt(e.target.value)
                    })
                  }
                />
              </div>
              <div className='space-y-2'>
                <Label>Skill Level</Label>
                <Select
                  value={editingSkill.skillLevel}
                  onValueChange={value =>
                    setEditingSkill({
                      ...editingSkill,
                      skillLevel: value as any
                    })
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value='beginner'>Beginner</SelectItem>
                    <SelectItem value='intermediate'>Intermediate</SelectItem>
                    <SelectItem value='expert'>Expert</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            <DialogFooter>
              <Button variant='outline' onClick={() => setEditingSkill(null)}>
                Cancel
              </Button>
              <Button
                onClick={() => handleUpdateSkill(editingSkill)}
                disabled={isSaving}
              >
                {isSaving && <Loader2 className='mr-2 h-4 w-4 animate-spin' />}
                Save Changes
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
}
