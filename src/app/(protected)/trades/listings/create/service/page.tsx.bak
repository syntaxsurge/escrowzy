'use client'

import { useRouter } from 'next/navigation'
import { useState } from 'react'

import { zodResolver } from '@hookform/resolvers/zod'
import {
  ArrowLeft,
  Briefcase,
  Clock,
  DollarSign,
  Plus,
  X,
  Users,
  Award,
  AlertCircle
} from 'lucide-react'
import { useForm } from 'react-hook-form'
import { z } from 'zod'

import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { LoadingButton } from '@/components/ui/loading-button'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { appRoutes } from '@/config/app-routes'
import { useToast } from '@/hooks/use-toast'

// Job posting schema
const createJobSchema = z.object({
  postingType: z.enum(['job', 'offer']), // job = client posts job, offer = freelancer offers service
  title: z.string().min(10, 'Title must be at least 10 characters'),
  description: z.string().min(50, 'Description must be at least 50 characters'),
  categoryId: z.string().min(1, 'Please select a category'),
  budgetType: z.enum(['fixed', 'hourly']),
  budgetMin: z.string().min(1, 'Minimum budget is required'),
  budgetMax: z.string().min(1, 'Maximum budget is required'),
  currency: z.string().default('USD'),
  deadline: z.string().optional(),
  experienceLevel: z.enum(['entry', 'intermediate', 'expert']),
  projectDuration: z.string().optional(),
  skillsRequired: z.array(z.string()).min(1, 'At least one skill is required'),
  milestones: z
    .array(
      z.object({
        title: z.string().min(5, 'Milestone title is required'),
        description: z.string().optional(),
        amount: z.string().min(1, 'Amount is required'),
        dueDate: z.string().optional()
      })
    )
    .optional()
})

type JobFormData = z.infer<typeof createJobSchema>

// Mock categories - these will come from the database
const jobCategories = [
  { id: '1', name: 'Web Development', icon: 'üíª' },
  { id: '2', name: 'Mobile Development', icon: 'üì±' },
  { id: '3', name: 'Design & Creative', icon: 'üé®' },
  { id: '4', name: 'Writing & Translation', icon: '‚úçÔ∏è' },
  { id: '5', name: 'Digital Marketing', icon: 'üìà' },
  { id: '6', name: 'Video & Animation', icon: 'üé¨' },
  { id: '7', name: 'Music & Audio', icon: 'üéµ' },
  { id: '8', name: 'Programming & Tech', icon: '‚öôÔ∏è' },
  { id: '9', name: 'Data Science & Analytics', icon: 'üìä' },
  { id: '10', name: 'Business & Consulting', icon: 'üíº' }
]

// Mock skills - these will come from the database
const availableSkills = [
  'JavaScript',
  'TypeScript',
  'React',
  'Node.js',
  'Python',
  'Java',
  'C++',
  'PHP',
  'Ruby',
  'Go',
  'Rust',
  'UI/UX Design',
  'Graphic Design',
  'Logo Design',
  'Illustration',
  'Content Writing',
  'Copywriting',
  'Technical Writing',
  'Translation',
  'SEO',
  'Social Media Marketing',
  'PPC',
  'Email Marketing',
  'Video Editing',
  '3D Animation',
  'Motion Graphics',
  'Data Analysis',
  'Machine Learning',
  'AI',
  'Blockchain'
]

export default function CreateServiceListingPage() {
  const router = useRouter()
  const { toast } = useToast()
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [selectedSkills, setSelectedSkills] = useState<string[]>([])
  const [skillSearch, setSkillSearch] = useState('')
  const [milestones, setMilestones] = useState<any[]>([])
  const [showMilestones, setShowMilestones] = useState(false)

  const form = useForm<JobFormData>({
    resolver: zodResolver(createJobSchema),
    defaultValues: {
      postingType: 'job',
      title: '',
      description: '',
      categoryId: '',
      budgetType: 'fixed',
      budgetMin: '',
      budgetMax: '',
      currency: 'USD',
      experienceLevel: 'intermediate',
      projectDuration: '',
      skillsRequired: [],
      milestones: []
    }
  })

  const budgetType = form.watch('budgetType')
  const postingType = form.watch('postingType')

  // Filter skills based on search
  const filteredSkills = availableSkills.filter(
    skill =>
      skill.toLowerCase().includes(skillSearch.toLowerCase()) &&
      !selectedSkills.includes(skill)
  )

  const addSkill = (skill: string) => {
    const newSkills = [...selectedSkills, skill]
    setSelectedSkills(newSkills)
    form.setValue('skillsRequired', newSkills)
    setSkillSearch('')
  }

  const removeSkill = (skill: string) => {
    const newSkills = selectedSkills.filter(s => s !== skill)
    setSelectedSkills(newSkills)
    form.setValue('skillsRequired', newSkills)
  }

  const addMilestone = () => {
    const newMilestone = {
      title: '',
      description: '',
      amount: '',
      dueDate: ''
    }
    setMilestones([...milestones, newMilestone])
  }

  const removeMilestone = (index: number) => {
    setMilestones(milestones.filter((_, i) => i !== index))
  }

  const updateMilestone = (index: number, field: string, value: string) => {
    const updated = [...milestones]
    updated[index] = { ...updated[index], [field]: value }
    setMilestones(updated)
    form.setValue('milestones', updated)
  }

  const onSubmit = async (_data: JobFormData) => {
    setIsSubmitting(true)
    try {
      // For now, we'll just show a success message
      // In production, this would create the job posting
      toast({
        title: 'Success',
        description:
          postingType === 'job'
            ? 'Your job has been posted successfully!'
            : 'Your service offer has been created!'
      })

      // Redirect to listings page
      router.push(appRoutes.trades.listings.base)
    } catch (_error) {
      console.error('Error submitting job:', error)
      toast({
        title: 'Error',
        description: 'Failed to create listing. Please try again.',
        variant: 'destructive'
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className='mx-auto max-w-4xl space-y-6'>
      {/* Header */}
      <div className='flex items-center gap-4'>
        <Button variant='ghost' size='icon' onClick={() => router.back()}>
          <ArrowLeft className='h-5 w-5' />
        </Button>
        <div className='flex-1'>
          <h1 className='text-2xl font-bold'>Post a Service Listing</h1>
          <p className='text-muted-foreground'>
            Find talented freelancers or offer your services
          </p>
        </div>
        <Briefcase className='h-8 w-8 text-green-500' />
      </div>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-6'>
          {/* Posting Type */}
          <Card>
            <CardHeader>
              <CardTitle>What would you like to do?</CardTitle>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name='postingType'
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                        className='grid grid-cols-2 gap-4'
                      >
                        <div className='relative'>
                          <RadioGroupItem
                            value='job'
                            id='job'
                            className='peer sr-only'
                          />
                          <Label
                            htmlFor='job'
                            className='border-muted hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary flex cursor-pointer flex-col items-center justify-center rounded-lg border-2 p-4'
                          >
                            <Users className='mb-2 h-6 w-6' />
                            <span className='font-semibold'>Post a Job</span>
                            <span className='text-muted-foreground text-sm'>
                              I need to hire a freelancer
                            </span>
                          </Label>
                        </div>
                        <div className='relative'>
                          <RadioGroupItem
                            value='offer'
                            id='offer'
                            className='peer sr-only'
                          />
                          <Label
                            htmlFor='offer'
                            className='border-muted hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary flex cursor-pointer flex-col items-center justify-center rounded-lg border-2 p-4'
                          >
                            <Award className='mb-2 h-6 w-6' />
                            <span className='font-semibold'>Offer Service</span>
                            <span className='text-muted-foreground text-sm'>
                              I want to offer my services
                            </span>
                          </Label>
                        </div>
                      </RadioGroup>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Basic Information */}
          <Card>
            <CardHeader>
              <CardTitle>
                {postingType === 'job' ? 'Job Details' : 'Service Details'}
              </CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <FormField
                control={form.control}
                name='title'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Title</FormLabel>
                    <FormControl>
                      <Input
                        placeholder={
                          postingType === 'job'
                            ? 'e.g., Build a responsive e-commerce website'
                            : 'e.g., I will create a professional website for your business'
                        }
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Make it clear and descriptive
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name='categoryId'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder='Select a category' />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {jobCategories.map(category => (
                          <SelectItem key={category.id} value={category.id}>
                            <span className='flex items-center gap-2'>
                              <span>{category.icon}</span>
                              <span>{category.name}</span>
                            </span>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name='description'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder={
                          postingType === 'job'
                            ? 'Describe what you need done, requirements, and deliverables...'
                            : 'Describe what services you offer, your process, and what clients can expect...'
                        }
                        className='min-h-[150px]'
                        {...field}
                      />
                    </FormControl>
                    <FormDescription>
                      Minimum 50 characters. Be as detailed as possible.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Budget Information */}
          <Card>
            <CardHeader>
              <CardTitle>Budget & Timeline</CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <FormField
                control={form.control}
                name='budgetType'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Budget Type</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value='fixed'>
                          <span className='flex items-center gap-2'>
                            <DollarSign className='h-4 w-4' />
                            Fixed Price
                          </span>
                        </SelectItem>
                        <SelectItem value='hourly'>
                          <span className='flex items-center gap-2'>
                            <Clock className='h-4 w-4' />
                            Hourly Rate
                          </span>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className='grid grid-cols-2 gap-4'>
                <FormField
                  control={form.control}
                  name='budgetMin'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>
                        {budgetType === 'hourly'
                          ? 'Min Hourly Rate'
                          : 'Minimum Budget'}
                      </FormLabel>
                      <FormControl>
                        <div className='relative'>
                          <span className='absolute top-1/2 left-3 -translate-y-1/2'>
                            $
                          </span>
                          <Input
                            type='number'
                            placeholder='0'
                            className='pl-8'
                            {...field}
                          />
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name='budgetMax'
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>
                        {budgetType === 'hourly'
                          ? 'Max Hourly Rate'
                          : 'Maximum Budget'}
                      </FormLabel>
                      <FormControl>
                        <div className='relative'>
                          <span className='absolute top-1/2 left-3 -translate-y-1/2'>
                            $
                          </span>
                          <Input
                            type='number'
                            placeholder='0'
                            className='pl-8'
                            {...field}
                          />
                        </div>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name='projectDuration'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Project Duration</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder='Select duration' />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value='less_than_week'>
                          Less than a week
                        </SelectItem>
                        <SelectItem value='1_2_weeks'>1-2 weeks</SelectItem>
                        <SelectItem value='2_4_weeks'>2-4 weeks</SelectItem>
                        <SelectItem value='1_3_months'>1-3 months</SelectItem>
                        <SelectItem value='3_6_months'>3-6 months</SelectItem>
                        <SelectItem value='more_than_6_months'>
                          More than 6 months
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name='deadline'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Deadline (Optional)</FormLabel>
                    <FormControl>
                      <Input type='date' {...field} />
                    </FormControl>
                    <FormDescription>
                      When do you need this completed?
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Skills & Experience */}
          <Card>
            <CardHeader>
              <CardTitle>Skills & Experience</CardTitle>
            </CardHeader>
            <CardContent className='space-y-4'>
              <FormField
                control={form.control}
                name='experienceLevel'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Experience Level</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value='entry'>
                          <div>
                            <div className='font-medium'>Entry Level</div>
                            <div className='text-muted-foreground text-sm'>
                              Looking for beginners or students
                            </div>
                          </div>
                        </SelectItem>
                        <SelectItem value='intermediate'>
                          <div>
                            <div className='font-medium'>Intermediate</div>
                            <div className='text-muted-foreground text-sm'>
                              Looking for experienced freelancers
                            </div>
                          </div>
                        </SelectItem>
                        <SelectItem value='expert'>
                          <div>
                            <div className='font-medium'>Expert</div>
                            <div className='text-muted-foreground text-sm'>
                              Looking for top professionals
                            </div>
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name='skillsRequired'
                render={() => (
                  <FormItem>
                    <FormLabel>Required Skills</FormLabel>
                    <FormControl>
                      <div className='space-y-3'>
                        <Input
                          placeholder='Search and add skills...'
                          value={skillSearch}
                          onChange={e => setSkillSearch(e.target.value)}
                        />

                        {/* Selected Skills */}
                        {selectedSkills.length > 0 && (
                          <div className='flex flex-wrap gap-2'>
                            {selectedSkills.map(skill => (
                              <Badge
                                key={skill}
                                variant='secondary'
                                className='cursor-pointer'
                                onClick={() => removeSkill(skill)}
                              >
                                {skill}
                                <X className='ml-1 h-3 w-3' />
                              </Badge>
                            ))}
                          </div>
                        )}

                        {/* Skill Suggestions */}
                        {skillSearch && filteredSkills.length > 0 && (
                          <div className='rounded-lg border p-2'>
                            <div className='text-muted-foreground mb-2 text-sm'>
                              Suggestions:
                            </div>
                            <div className='flex flex-wrap gap-2'>
                              {filteredSkills.slice(0, 10).map(skill => (
                                <Badge
                                  key={skill}
                                  variant='outline'
                                  className='hover:bg-accent cursor-pointer'
                                  onClick={() => addSkill(skill)}
                                >
                                  <Plus className='mr-1 h-3 w-3' />
                                  {skill}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </FormControl>
                    <FormDescription>
                      Add at least one required skill
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          {/* Milestones (Optional) */}
          {budgetType === 'fixed' && (
            <Card>
              <CardHeader>
                <CardTitle className='flex items-center justify-between'>
                  <span>Milestones (Optional)</span>
                  <Button
                    type='button'
                    variant='outline'
                    size='sm'
                    onClick={() => setShowMilestones(!showMilestones)}
                  >
                    {showMilestones ? 'Hide' : 'Add'} Milestones
                  </Button>
                </CardTitle>
              </CardHeader>

              {showMilestones && (
                <CardContent className='space-y-4'>
                  <Alert>
                    <AlertCircle className='h-4 w-4' />
                    <AlertDescription>
                      Break your project into milestones for better payment
                      management
                    </AlertDescription>
                  </Alert>

                  {milestones.map((milestone, index) => (
                    <div
                      key={index}
                      className='space-y-3 rounded-lg border p-4'
                    >
                      <div className='flex items-center justify-between'>
                        <Label>Milestone {index + 1}</Label>
                        <Button
                          type='button'
                          variant='ghost'
                          size='sm'
                          onClick={() => removeMilestone(index)}
                        >
                          <X className='h-4 w-4' />
                        </Button>
                      </div>

                      <Input
                        placeholder='Milestone title'
                        value={milestone.title}
                        onChange={e =>
                          updateMilestone(index, 'title', e.target.value)
                        }
                      />

                      <Textarea
                        placeholder='Milestone description (optional)'
                        value={milestone.description}
                        onChange={e =>
                          updateMilestone(index, 'description', e.target.value)
                        }
                      />

                      <div className='grid grid-cols-2 gap-3'>
                        <div className='relative'>
                          <span className='absolute top-1/2 left-3 -translate-y-1/2'>
                            $
                          </span>
                          <Input
                            type='number'
                            placeholder='Amount'
                            className='pl-8'
                            value={milestone.amount}
                            onChange={e =>
                              updateMilestone(index, 'amount', e.target.value)
                            }
                          />
                        </div>

                        <Input
                          type='date'
                          placeholder='Due date'
                          value={milestone.dueDate}
                          onChange={e =>
                            updateMilestone(index, 'dueDate', e.target.value)
                          }
                        />
                      </div>
                    </div>
                  ))}

                  <Button
                    type='button'
                    variant='outline'
                    className='w-full'
                    onClick={addMilestone}
                  >
                    <Plus className='mr-2 h-4 w-4' />
                    Add Milestone
                  </Button>
                </CardContent>
              )}
            </Card>
          )}

          {/* Submit */}
          <div className='flex gap-3'>
            <Button
              type='button'
              variant='outline'
              className='flex-1'
              onClick={() => router.back()}
            >
              Cancel
            </Button>
            <LoadingButton
              type='submit'
              className='flex-1'
              isLoading={isSubmitting}
              disabled={isSubmitting}
            >
              {postingType === 'job' ? 'Post Job' : 'Create Service Offer'}
            </LoadingButton>
          </div>
        </form>
      </Form>
    </div>
  )
}
