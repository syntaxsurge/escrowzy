import { NextRequest } from 'next/server'

import { apiResponses } from '@/lib/api/server-utils'
import { getUserForRoute } from '@/lib/auth/get-user-route'
import {
  getFreelancerProfileByUserId,
  upsertFreelancerProfile
} from '@/lib/db/queries/freelancers'
import { freelancerProfileSchema } from '@/lib/schemas/freelancer'

export async function GET(_request: NextRequest) {
  try {
    const auth = await getUserForRoute()
    if (!auth) {
      return apiResponses.unauthorized()
    }

    const profile = await getFreelancerProfileByUserId(auth.id)

    if (!profile) {
      return apiResponses.notFound('Freelancer profile not found')
    }

    return apiResponses.success({ profile })
  } catch (_error) {
    return apiResponses.handleError(error, 'Failed to fetch profile')
  }
}

export async function POST(request: NextRequest) {
  try {
    const auth = await getUserForRoute()
    if (!auth) {
      return apiResponses.unauthorized()
    }

    const body = await request.json()

    // Validate the profile data
    const validatedData = freelancerProfileSchema.parse(body)

    // Check if profile already exists
    const existingProfile = await getFreelancerProfileByUserId(auth.id)
    if (existingProfile) {
      return apiResponses.badRequest('Profile already exists')
    }

    // Create the profile with skills and portfolio items
    const profile = await upsertFreelancerProfile(auth.id, {
      userId: auth.id,
      professionalTitle: validatedData.professionalTitle,
      bio: validatedData.bio,
      hourlyRate: validatedData.hourlyRate
        ? validatedData.hourlyRate.toString()
        : undefined,
      availability: validatedData.availability,
      yearsOfExperience: validatedData.yearsOfExperience,
      timezone: validatedData.timezone,
      portfolioUrl: validatedData.portfolioUrl,
      linkedinUrl: validatedData.linkedinUrl,
      githubUrl: validatedData.githubUrl,
      languages: validatedData.languages
    })

    return apiResponses.success({ profile })
  } catch (_error) {
    return apiResponses.handleError(error, 'Failed to create profile')
  }
}

export async function PUT(request: NextRequest) {
  try {
    const auth = await getUserForRoute()
    if (!auth) {
      return apiResponses.unauthorized()
    }

    const body = await request.json()

    // Get existing profile
    const existingProfile = await getFreelancerProfileByUserId(auth.id)
    if (!existingProfile) {
      return apiResponses.notFound('Profile not found')
    }

    // Update the profile
    const updatedProfile = await upsertFreelancerProfile(auth.id, {
      professionalTitle: body.professionalTitle,
      bio: body.bio,
      hourlyRate: body.hourlyRate?.toString(),
      availability: body.availability || body.availabilityStatus,
      yearsOfExperience: body.yearsOfExperience,
      timezone: body.timezone,
      portfolioUrl: body.portfolioUrl,
      linkedinUrl: body.linkedinUrl,
      githubUrl: body.githubUrl,
      languages: body.languages
    })

    return apiResponses.success({ profile: updatedProfile })
  } catch (_error) {
    return apiResponses.handleError(error, 'Failed to update profile')
  }
}
