import { NextRequest, NextResponse } from 'next/server'

import { eq, sql } from 'drizzle-orm'

import { getSession } from '@/lib/auth'
import { db } from '@/lib/db/drizzle'
import { getReferralLeaderboard } from '@/lib/db/queries/referrals'
import { referralConversions, referralLinks } from '@/lib/db/schema'

export async function GET(req: NextRequest) {
  try {
    const _session = await getSession()

    if (!session?.user?.id) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    const searchParams = req.nextUrl.searchParams
    const type = searchParams.get('type') || 'personal'

    if (type === 'leaderboard') {
      const period =
        (searchParams.get('period') as
          | 'daily'
          | 'weekly'
          | 'monthly'
          | 'all_time') || 'monthly'
      const limit = parseInt(searchParams.get('limit') || '10')

      const leaderboard = await getReferralLeaderboard(limit)

      return NextResponse.json(leaderboard)
    } else {
      // Get referral stats for the user
      const stats = await db
        .select({
          totalReferrals: sql<number>`COUNT(DISTINCT ${referralLinks.id})`,
          successfulReferrals: sql<number>`COUNT(DISTINCT ${referralConversions.id})`,
          pendingReferrals: sql<number>`0`,
          totalRewards: sql<number>`0`
        })
        .from(referralLinks)
        .leftJoin(
          referralConversions,
          eq(referralConversions.referralLinkId, referralLinks.id)
        )
        .where(eq(referralLinks.userId, session.user.id))

      return NextResponse.json(stats)
    }
  } catch (_error) {
    console.error('Failed to fetch referral stats:', error)
    return NextResponse.json(
      { error: 'Failed to fetch referral stats' },
      { status: 500 }
    )
  }
}
