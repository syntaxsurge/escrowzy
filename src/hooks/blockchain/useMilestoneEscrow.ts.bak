'use client'

import { useState, useCallback, useEffect } from 'react'

import { parseEther, type Address } from 'viem'
import {
  useAccount,
  useWriteContract,
  useWaitForTransactionReceipt,
  usePublicClient
} from 'wagmi'

import { useBlockchainConfig } from '@/hooks/blockchain/useBlockchainConfig'
import { useToast } from '@/hooks/use-toast'

// ABI for MilestoneEscrow contract
const MILESTONE_ESCROW_ABI = [
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_titles', type: 'string[]' },
      { name: '_descriptions', type: 'string[]' },
      { name: '_amounts', type: 'uint256[]' },
      { name: '_dueDates', type: 'uint256[]' }
    ],
    name: 'createMilestones',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' },
      { name: '_submissionUrl', type: 'string' }
    ],
    name: 'submitMilestone',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' },
      { name: '_feedback', type: 'string' }
    ],
    name: 'approveMilestone',
    outputs: [],
    stateMutability: 'payable',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' }
    ],
    name: 'autoReleaseMilestone',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' },
      { name: '_reason', type: 'string' }
    ],
    name: 'requestMilestoneRevision',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' },
      { name: '_reason', type: 'string' }
    ],
    name: 'disputeMilestone',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_enabled', type: 'bool' },
      { name: '_window', type: 'uint256' }
    ],
    name: 'configureAutoRelease',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [{ name: '_escrowId', type: 'uint256' }],
    name: 'getMilestones',
    outputs: [
      {
        components: [
          { name: 'escrowId', type: 'uint256' },
          { name: 'title', type: 'string' },
          { name: 'description', type: 'string' },
          { name: 'amount', type: 'uint256' },
          { name: 'dueDate', type: 'uint256' },
          { name: 'status', type: 'uint8' },
          { name: 'submittedAt', type: 'uint256' },
          { name: 'approvedAt', type: 'uint256' },
          { name: 'submissionUrl', type: 'string' },
          { name: 'feedback', type: 'string' },
          { name: 'revisionCount', type: 'uint256' },
          { name: 'fundsReleased', type: 'bool' },
          { name: 'autoReleaseTime', type: 'uint256' },
          { name: 'autoReleaseEnabled', type: 'bool' }
        ],
        name: '',
        type: 'tuple[]'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' }
    ],
    name: 'getMilestone',
    outputs: [
      {
        components: [
          { name: 'escrowId', type: 'uint256' },
          { name: 'title', type: 'string' },
          { name: 'description', type: 'string' },
          { name: 'amount', type: 'uint256' },
          { name: 'dueDate', type: 'uint256' },
          { name: 'status', type: 'uint8' },
          { name: 'submittedAt', type: 'uint256' },
          { name: 'approvedAt', type: 'uint256' },
          { name: 'submissionUrl', type: 'string' },
          { name: 'feedback', type: 'string' },
          { name: 'revisionCount', type: 'uint256' },
          { name: 'fundsReleased', type: 'bool' },
          { name: 'autoReleaseTime', type: 'uint256' },
          { name: 'autoReleaseEnabled', type: 'bool' }
        ],
        name: '',
        type: 'tuple'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ name: '_escrowId', type: 'uint256' }],
    name: 'getMilestoneProgress',
    outputs: [
      { name: 'total', type: 'uint256' },
      { name: 'completed', type: 'uint256' },
      { name: 'inProgress', type: 'uint256' },
      { name: 'disputed', type: 'uint256' }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      { name: '_escrowId', type: 'uint256' },
      { name: '_milestoneIndex', type: 'uint256' }
    ],
    name: 'canAutoRelease',
    outputs: [
      { name: 'canRelease', type: 'bool' },
      { name: 'timeRemaining', type: 'uint256' }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [{ name: '_escrowId', type: 'uint256' }],
    name: 'getAutoReleaseEligibleMilestones',
    outputs: [{ name: 'eligibleIndices', type: 'uint256[]' }],
    stateMutability: 'view',
    type: 'function'
  }
] as const

export enum MilestoneStatus {
  PENDING = 0,
  IN_PROGRESS = 1,
  SUBMITTED = 2,
  APPROVED = 3,
  DISPUTED = 4,
  CANCELLED = 5
}

export interface Milestone {
  escrowId: bigint
  title: string
  description: string
  amount: bigint
  dueDate: bigint
  status: MilestoneStatus
  submittedAt: bigint
  approvedAt: bigint
  submissionUrl: string
  feedback: string
  revisionCount: bigint
  fundsReleased: boolean
  autoReleaseTime: bigint
  autoReleaseEnabled: boolean
}

export interface MilestoneProgress {
  total: bigint
  completed: bigint
  inProgress: bigint
  disputed: bigint
}

export interface CreateMilestoneData {
  title: string
  description: string
  amount: string
  dueDate: Date
}

export function useMilestoneEscrow() {
  const { address } = useAccount()
  const { toast } = useToast()
  const publicClient = usePublicClient()
  const config = useBlockchainConfig()

  const [isProcessing, setIsProcessing] = useState(false)

  // Get the contract address from the first available chain (coreTestnet)
  const contractAddress = config.chains.coreTestnet?.contractAddresses
    ?.milestoneEscrow as Address | undefined

  // Write contract hooks
  const { writeContract: createMilestones, data: createHash } =
    useWriteContract()
  const { writeContract: submitMilestone, data: submitHash } =
    useWriteContract()
  const { writeContract: approveMilestone, data: approveHash } =
    useWriteContract()
  const { writeContract: autoRelease, data: autoReleaseHash } =
    useWriteContract()
  const { writeContract: requestRevision, data: revisionHash } =
    useWriteContract()
  const { writeContract: disputeMilestone, data: disputeHash } =
    useWriteContract()
  const { writeContract: configureAutoRelease, data: configHash } =
    useWriteContract()

  // Transaction receipts
  const { isLoading: isCreateLoading, isSuccess: isCreateSuccess } =
    useWaitForTransactionReceipt({ hash: createHash })
  const { isLoading: isSubmitLoading, isSuccess: isSubmitSuccess } =
    useWaitForTransactionReceipt({ hash: submitHash })
  const { isLoading: isApproveLoading, isSuccess: isApproveSuccess } =
    useWaitForTransactionReceipt({ hash: approveHash })
  const { isLoading: isAutoReleaseLoading, isSuccess: isAutoReleaseSuccess } =
    useWaitForTransactionReceipt({ hash: autoReleaseHash })
  const { isLoading: isRevisionLoading, isSuccess: isRevisionSuccess } =
    useWaitForTransactionReceipt({ hash: revisionHash })
  const { isLoading: isDisputeLoading, isSuccess: isDisputeSuccess } =
    useWaitForTransactionReceipt({ hash: disputeHash })
  const { isLoading: isConfigLoading, isSuccess: isConfigSuccess } =
    useWaitForTransactionReceipt({ hash: configHash })

  // Create milestones for an escrow
  const handleCreateMilestones = useCallback(
    async (escrowId: bigint, milestones: CreateMilestoneData[]) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        const titles = milestones.map(m => m.title)
        const descriptions = milestones.map(m => m.description)
        const amounts = milestones.map(m => parseEther(m.amount))
        const dueDates = milestones.map(m =>
          BigInt(Math.floor(m.dueDate.getTime() / 1000))
        )

        await createMilestones({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'createMilestones',
          args: [escrowId, titles, descriptions, amounts, dueDates]
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Creating milestones...'
        })
      } catch (_error) {
        console.error('Error creating milestones:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to create milestones',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, createMilestones, toast]
  )

  // Submit a milestone
  const handleSubmitMilestone = useCallback(
    async (escrowId: bigint, milestoneIndex: bigint, submissionUrl: string) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        await submitMilestone({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'submitMilestone',
          args: [escrowId, milestoneIndex, submissionUrl]
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Submitting milestone...'
        })
      } catch (_error) {
        console.error('Error submitting milestone:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to submit milestone',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, submitMilestone, toast]
  )

  // Approve a milestone
  const handleApproveMilestone = useCallback(
    async (
      escrowId: bigint,
      milestoneIndex: bigint,
      feedback: string,
      tipAmount?: string
    ) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        const value = tipAmount ? parseEther(tipAmount) : BigInt(0)

        await approveMilestone({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'approveMilestone',
          args: [escrowId, milestoneIndex, feedback],
          value
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Approving milestone...'
        })
      } catch (_error) {
        console.error('Error approving milestone:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to approve milestone',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, approveMilestone, toast]
  )

  // Auto-release a milestone
  const handleAutoRelease = useCallback(
    async (escrowId: bigint, milestoneIndex: bigint) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        await autoRelease({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'autoReleaseMilestone',
          args: [escrowId, milestoneIndex]
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Auto-releasing milestone...'
        })
      } catch (_error) {
        console.error('Error auto-releasing milestone:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to auto-release milestone',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, autoRelease, toast]
  )

  // Request milestone revision
  const handleRequestRevision = useCallback(
    async (escrowId: bigint, milestoneIndex: bigint, reason: string) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        await requestRevision({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'requestMilestoneRevision',
          args: [escrowId, milestoneIndex, reason]
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Requesting revision...'
        })
      } catch (_error) {
        console.error('Error requesting revision:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to request revision',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, requestRevision, toast]
  )

  // Dispute a milestone
  const handleDisputeMilestone = useCallback(
    async (escrowId: bigint, milestoneIndex: bigint, reason: string) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        await disputeMilestone({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'disputeMilestone',
          args: [escrowId, milestoneIndex, reason]
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Raising dispute...'
        })
      } catch (_error) {
        console.error('Error disputing milestone:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to dispute milestone',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, disputeMilestone, toast]
  )

  // Configure auto-release settings
  const handleConfigureAutoRelease = useCallback(
    async (escrowId: bigint, enabled: boolean, windowInDays: number) => {
      if (!contractAddress) {
        toast({
          title: 'Error',
          description: 'MilestoneEscrow contract not configured',
          variant: 'destructive'
        })
        return
      }

      try {
        setIsProcessing(true)

        const windowInSeconds = BigInt(windowInDays * 24 * 60 * 60)

        await configureAutoRelease({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'configureAutoRelease',
          args: [escrowId, enabled, windowInSeconds]
        })

        toast({
          title: 'Transaction Submitted',
          description: 'Configuring auto-release...'
        })
      } catch (_error) {
        console.error('Error configuring auto-release:', error)
        toast({
          title: 'Error',
          description:
            error instanceof Error
              ? error.message
              : 'Failed to configure auto-release',
          variant: 'destructive'
        })
      } finally {
        setIsProcessing(false)
      }
    },
    [contractAddress, configureAutoRelease, toast]
  )

  // Get milestones for an escrow
  const getMilestones = useCallback(
    async (escrowId: bigint): Promise<Milestone[] | null> => {
      if (!contractAddress || !publicClient) return null

      try {
        const _result = await publicClient.readContract({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'getMilestones',
          args: [escrowId]
        })

        return result as Milestone[]
      } catch (_error) {
        console.error('Error fetching milestones:', error)
        return null
      }
    },
    [contractAddress, publicClient]
  )

  // Get milestone progress
  const getMilestoneProgress = useCallback(
    async (escrowId: bigint): Promise<MilestoneProgress | null> => {
      if (!contractAddress || !publicClient) return null

      try {
        const [total, completed, inProgress, disputed] =
          (await publicClient.readContract({
            address: contractAddress,
            abi: MILESTONE_ESCROW_ABI,
            functionName: 'getMilestoneProgress',
            args: [escrowId]
          })) as [bigint, bigint, bigint, bigint]

        return { total, completed, inProgress, disputed }
      } catch (_error) {
        console.error('Error fetching milestone progress:', error)
        return null
      }
    },
    [contractAddress, publicClient]
  )

  // Check if milestone can be auto-released
  const canAutoRelease = useCallback(
    async (
      escrowId: bigint,
      milestoneIndex: bigint
    ): Promise<{ canRelease: boolean; timeRemaining: bigint } | null> => {
      if (!contractAddress || !publicClient) return null

      try {
        const [canRelease, timeRemaining] = (await publicClient.readContract({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'canAutoRelease',
          args: [escrowId, milestoneIndex]
        })) as [boolean, bigint]

        return { canRelease, timeRemaining }
      } catch (_error) {
        console.error('Error checking auto-release:', error)
        return null
      }
    },
    [contractAddress, publicClient]
  )

  // Get eligible milestones for auto-release
  const getAutoReleaseEligible = useCallback(
    async (escrowId: bigint): Promise<bigint[] | null> => {
      if (!contractAddress || !publicClient) return null

      try {
        const _result = await publicClient.readContract({
          address: contractAddress,
          abi: MILESTONE_ESCROW_ABI,
          functionName: 'getAutoReleaseEligibleMilestones',
          args: [escrowId]
        })

        return result as bigint[]
      } catch (_error) {
        console.error('Error fetching eligible milestones:', error)
        return null
      }
    },
    [contractAddress, publicClient]
  )

  // Handle transaction success
  useEffect(() => {
    if (isCreateSuccess) {
      toast({
        title: 'Success',
        description: 'Milestones created successfully!'
      })
    }
  }, [isCreateSuccess, toast])

  useEffect(() => {
    if (isSubmitSuccess) {
      toast({
        title: 'Success',
        description: 'Milestone submitted successfully!'
      })
    }
  }, [isSubmitSuccess, toast])

  useEffect(() => {
    if (isApproveSuccess) {
      toast({
        title: 'Success',
        description: 'Milestone approved and payment released!'
      })
    }
  }, [isApproveSuccess, toast])

  useEffect(() => {
    if (isAutoReleaseSuccess) {
      toast({
        title: 'Success',
        description: 'Milestone auto-released successfully!'
      })
    }
  }, [isAutoReleaseSuccess, toast])

  useEffect(() => {
    if (isRevisionSuccess) {
      toast({
        title: 'Success',
        description: 'Revision request sent!'
      })
    }
  }, [isRevisionSuccess, toast])

  useEffect(() => {
    if (isDisputeSuccess) {
      toast({
        title: 'Success',
        description: 'Dispute raised successfully!'
      })
    }
  }, [isDisputeSuccess, toast])

  useEffect(() => {
    if (isConfigSuccess) {
      toast({
        title: 'Success',
        description: 'Auto-release settings updated!'
      })
    }
  }, [isConfigSuccess, toast])

  return {
    // Contract address
    contractAddress,
    isConnected: !!address,

    // Write functions
    createMilestones: handleCreateMilestones,
    submitMilestone: handleSubmitMilestone,
    approveMilestone: handleApproveMilestone,
    autoReleaseMilestone: handleAutoRelease,
    requestRevision: handleRequestRevision,
    disputeMilestone: handleDisputeMilestone,
    configureAutoRelease: handleConfigureAutoRelease,

    // Read functions
    getMilestones,
    getMilestoneProgress,
    canAutoRelease,
    getAutoReleaseEligible,

    // Loading states
    isProcessing:
      isProcessing ||
      isCreateLoading ||
      isSubmitLoading ||
      isApproveLoading ||
      isAutoReleaseLoading ||
      isRevisionLoading ||
      isDisputeLoading ||
      isConfigLoading,

    // Success states
    isCreateSuccess,
    isSubmitSuccess,
    isApproveSuccess,
    isAutoReleaseSuccess,
    isRevisionSuccess,
    isDisputeSuccess,
    isConfigSuccess
  }
}
