'use client'

import { useState } from 'react'

import {
  Archive,
  Calendar,
  CheckCircle,
  ChevronDown,
  ChevronUp,
  DollarSign,
  FileText,
  Loader2,
  Search,
  XCircle
} from 'lucide-react'
import { toast } from 'sonner'
import useSWR from 'swr'

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Progress } from '@/components/ui/progress'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue
} from '@/components/ui/select'
import { api } from '@/lib/api/http-client'
import { cn } from '@/lib/utils'

interface JobArchivesProps {
  freelancerId: number
}

interface ArchivedJob {
  id: number
  jobId: number
  title: string
  clientName: string
  clientAvatar?: string
  bidAmount: string
  deliveryTimeDays: number
  status: string
  startDate: Date
  completedDate?: Date
  totalMilestones: number
  completedMilestones: number
  totalAmount: number
  paidAmount: number
  completionRate: number
}

interface ArchiveSummary {
  totalJobs: number
  completedJobs: number
  cancelledJobs: number
  totalEarnings: number
  averageCompletionRate: number
}

export function JobArchives({ freelancerId }: JobArchivesProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState<
    'all' | 'completed' | 'cancelled'
  >('all')
  const [sortBy, setSortBy] = useState<'date' | 'amount' | 'client'>('date')
  const [expandedJobs, setExpandedJobs] = useState<Set<number>>(new Set())

  const { data, isLoading, mutate } = useSWR(
    `/api/freelancers/${freelancerId}/archived-jobs`,
    async (url: string) => {
      const response = await api.get(url)
      return response.success ? response.data : { jobs: [], summary: {} }
    }
  )

  const jobs: ArchivedJob[] = data?.jobs || []
  const summary: ArchiveSummary = data?.summary || {}

  // Filter and sort jobs
  const filteredJobs = jobs
    .filter(job => {
      const matchesSearch =
        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        job.clientName.toLowerCase().includes(searchTerm.toLowerCase())
      const matchesStatus =
        statusFilter === 'all' || job.status === statusFilter
      return matchesSearch && matchesStatus
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'amount':
          return b.paidAmount - a.paidAmount
        case 'client':
          return a.clientName.localeCompare(b.clientName)
        case 'date':
        default:
          return (
            new Date(b.completedDate || b.startDate).getTime() -
            new Date(a.completedDate || a.startDate).getTime()
          )
      }
    })

  const toggleJobExpansion = (jobId: number) => {
    const newExpanded = new Set(expandedJobs)
    if (newExpanded.has(jobId)) {
      newExpanded.delete(jobId)
    } else {
      newExpanded.add(jobId)
    }
    setExpandedJobs(newExpanded)
  }

  const handleUnarchive = async (jobId: number) => {
    try {
      const response = await api.patch(`/api/jobs/${jobId}/status`, {
        status: 'in_progress'
      })

      if (response.success) {
        toast.success('Job moved back to active')
        mutate()
      } else {
        toast.error('Failed to unarchive job')
      }
    } catch (_error) {
      toast.error('Failed to unarchive job')
    }
  }

  if (isLoading) {
    return (
      <Card>
        <CardContent className='flex min-h-[400px] items-center justify-center'>
          <div className='text-center'>
            <Loader2 className='text-primary mx-auto mb-4 h-8 w-8 animate-spin' />
            <p className='text-muted-foreground'>Loading archived jobs...</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className='space-y-4'>
      {/* Summary Stats */}
      <div className='grid gap-4 md:grid-cols-5'>
        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>Total Jobs</CardTitle>
            <Archive className='text-muted-foreground h-4 w-4' />
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold'>{summary.totalJobs}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>Completed</CardTitle>
            <CheckCircle className='h-4 w-4 text-green-600' />
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold text-green-600'>
              {summary.completedJobs}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>Cancelled</CardTitle>
            <XCircle className='h-4 w-4 text-red-600' />
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold text-red-600'>
              {summary.cancelledJobs}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>
              Total Earnings
            </CardTitle>
            <DollarSign className='text-muted-foreground h-4 w-4' />
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold'>
              ${summary.totalEarnings?.toFixed(2) || '0.00'}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className='flex flex-row items-center justify-between space-y-0 pb-2'>
            <CardTitle className='text-sm font-medium'>
              Avg Completion
            </CardTitle>
            <FileText className='text-muted-foreground h-4 w-4' />
          </CardHeader>
          <CardContent>
            <div className='text-2xl font-bold'>
              {summary.averageCompletionRate}%
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Archives List */}
      <Card>
        <CardHeader>
          <CardTitle className='flex items-center gap-2'>
            <Archive className='h-5 w-5' />
            Job Archives
          </CardTitle>
        </CardHeader>
        <CardContent>
          {/* Filters */}
          <div className='mb-6 flex flex-col gap-3 sm:flex-row'>
            <div className='relative flex-1'>
              <Search className='text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2' />
              <Input
                placeholder='Search by job title or client...'
                value={searchTerm}
                onChange={e => setSearchTerm(e.target.value)}
                className='pl-9'
              />
            </div>
            <Select
              value={statusFilter}
              onValueChange={(value: any) => setStatusFilter(value)}
            >
              <SelectTrigger className='w-[150px]'>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value='all'>All Status</SelectItem>
                <SelectItem value='completed'>Completed</SelectItem>
                <SelectItem value='cancelled'>Cancelled</SelectItem>
              </SelectContent>
            </Select>
            <Select
              value={sortBy}
              onValueChange={(value: any) => setSortBy(value)}
            >
              <SelectTrigger className='w-[150px]'>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value='date'>Sort by Date</SelectItem>
                <SelectItem value='amount'>Sort by Amount</SelectItem>
                <SelectItem value='client'>Sort by Client</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Jobs List */}
          <div className='space-y-3'>
            {filteredJobs.length > 0 ? (
              filteredJobs.map(job => {
                const isExpanded = expandedJobs.has(job.id)

                return (
                  <div
                    key={job.id}
                    className='rounded-lg border transition-all hover:shadow-sm'
                  >
                    <div
                      className='cursor-pointer p-4'
                      onClick={() => toggleJobExpansion(job.id)}
                    >
                      <div className='flex items-center justify-between'>
                        <div className='flex items-center gap-3'>
                          <Avatar className='h-10 w-10'>
                            <AvatarImage src={job.clientAvatar} />
                            <AvatarFallback>
                              {job.clientName?.charAt(0) || '?'}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <p className='font-medium'>{job.title}</p>
                            <p className='text-muted-foreground text-sm'>
                              {job.clientName}
                            </p>
                          </div>
                        </div>
                        <div className='flex items-center gap-4'>
                          <div className='text-right'>
                            <p className='font-bold'>
                              ${job.paidAmount.toFixed(2)}
                            </p>
                            <p className='text-muted-foreground text-xs'>
                              of ${job.totalAmount.toFixed(2)}
                            </p>
                          </div>
                          <Badge
                            variant='outline'
                            className={cn(
                              job.status === 'completed' && 'text-green-600',
                              job.status === 'cancelled' && 'text-red-600'
                            )}
                          >
                            {job.status}
                          </Badge>
                          {isExpanded ? (
                            <ChevronUp className='text-muted-foreground h-4 w-4' />
                          ) : (
                            <ChevronDown className='text-muted-foreground h-4 w-4' />
                          )}
                        </div>
                      </div>
                    </div>

                    {isExpanded && (
                      <div className='border-t px-4 py-3'>
                        <div className='grid gap-4 sm:grid-cols-2'>
                          <div>
                            <p className='text-muted-foreground mb-1 text-xs'>
                              Project Timeline
                            </p>
                            <div className='flex items-center gap-2 text-sm'>
                              <Calendar className='h-3 w-3' />
                              {new Date(
                                job.startDate
                              ).toLocaleDateString()} -{' '}
                              {job.completedDate
                                ? new Date(
                                    job.completedDate
                                  ).toLocaleDateString()
                                : 'Not completed'}
                            </div>
                          </div>
                          <div>
                            <p className='text-muted-foreground mb-1 text-xs'>
                              Delivery Time
                            </p>
                            <p className='text-sm'>
                              {job.deliveryTimeDays} days
                            </p>
                          </div>
                          <div>
                            <p className='text-muted-foreground mb-1 text-xs'>
                              Milestones
                            </p>
                            <div className='flex items-center gap-2'>
                              <Progress
                                value={job.completionRate}
                                className='h-2 flex-1'
                              />
                              <span className='text-sm'>
                                {job.completedMilestones}/{job.totalMilestones}
                              </span>
                            </div>
                          </div>
                          <div>
                            <p className='text-muted-foreground mb-1 text-xs'>
                              Bid Amount
                            </p>
                            <p className='text-sm font-medium'>
                              ${job.bidAmount}
                            </p>
                          </div>
                        </div>
                        <div className='mt-4 flex justify-end gap-2'>
                          <Button
                            variant='outline'
                            size='sm'
                            onClick={e => {
                              e.stopPropagation()
                              window.location.href = `/jobs/${job.jobId}/workspace`
                            }}
                          >
                            View Details
                          </Button>
                          {job.status === 'cancelled' && (
                            <Button
                              variant='outline'
                              size='sm'
                              onClick={e => {
                                e.stopPropagation()
                                handleUnarchive(job.jobId)
                              }}
                            >
                              Reactivate
                            </Button>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )
              })
            ) : (
              <div className='py-12 text-center'>
                <Archive className='text-muted-foreground mx-auto mb-3 h-10 w-10' />
                <p className='text-muted-foreground mb-1 text-sm'>
                  No archived jobs found
                </p>
                <p className='text-muted-foreground text-xs'>
                  Completed and cancelled jobs will appear here
                </p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
