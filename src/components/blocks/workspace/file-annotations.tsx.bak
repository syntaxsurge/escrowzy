'use client'

import { useState } from 'react'

import { format } from 'date-fns'
import { CheckCircle, MessageSquare, Plus, Reply } from 'lucide-react'
import useSWR from 'swr'

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle
} from '@/components/ui/dialog'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Textarea } from '@/components/ui/textarea'
import { api } from '@/lib/api/http-client'

interface Annotation {
  id: number
  comment: string
  coordinates?: {
    x: number
    y: number
    width?: number
    height?: number
  }
  pageNumber?: number
  lineNumber?: number
  status: 'open' | 'resolved' | 'archived'
  user: {
    id: number
    name: string
    avatarUrl: string | null
  }
  resolvedBy?: {
    id: number
    name: string
  }
  resolvedAt?: Date
  replies?: Annotation[]
  createdAt: Date
  updatedAt: Date
}

interface FileAnnotationsProps {
  fileVersionId: number
  fileType: string
  isOpen: boolean
  onClose: () => void
  canAnnotate: boolean
}

export function FileAnnotations({
  fileVersionId,
  fileType,
  isOpen,
  onClose,
  canAnnotate
}: FileAnnotationsProps) {
  const [selectedAnnotation, setSelectedAnnotation] =
    useState<Annotation | null>(null)
  const [isCreating, setIsCreating] = useState(false)
  const [newComment, setNewComment] = useState('')
  const [replyText, setReplyText] = useState('')
  const [showReplyInput, setShowReplyInput] = useState<number | null>(null)
  const [coordinates, setCoordinates] = useState<{
    x: number
    y: number
  } | null>(null)

  // Fetch annotations
  const { data: annotations = [], mutate } = useSWR(
    fileVersionId ? `/api/files/${fileVersionId}/annotations` : null,
    async (url: string) => {
      const response = await api.get(url)
      return response.success ? (response as any).annotations : []
    }
  )

  // Create annotation
  const handleCreateAnnotation = async () => {
    if (!newComment.trim()) return

    try {
      await api.post(`/api/files/${fileVersionId}/annotations`, {
        comment: newComment,
        coordinates,
        status: 'open'
      })

      setNewComment('')
      setCoordinates(null)
      setIsCreating(false)
      mutate()
    } catch (_error) {
      console.error('Failed to create annotation:', error)
    }
  }

  // Reply to annotation
  const handleReply = async (annotationId: number) => {
    if (!replyText.trim()) return

    try {
      await api.post(`/api/files/${fileVersionId}/annotations`, {
        comment: replyText,
        parentAnnotationId: annotationId,
        status: 'open'
      })

      setReplyText('')
      setShowReplyInput(null)
      mutate()
    } catch (_error) {
      console.error('Failed to reply:', error)
    }
  }

  // Resolve annotation
  const handleResolve = async (annotationId: number) => {
    try {
      await api.patch(
        `/api/files/${fileVersionId}/annotations/${annotationId}`,
        {
          status: 'resolved'
        }
      )
      mutate()
    } catch (_error) {
      console.error('Failed to resolve annotation:', error)
    }
  }

  // Group annotations by status
  const openAnnotations = annotations.filter(
    (a: Annotation) => a.status === 'open'
  )
  const resolvedAnnotations = annotations.filter(
    (a: Annotation) => a.status === 'resolved'
  )

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className='sm:max-w-2xl'>
        <DialogHeader>
          <DialogTitle>File Annotations</DialogTitle>
          <DialogDescription>
            Review and discuss specific parts of this file
          </DialogDescription>
        </DialogHeader>

        <div className='space-y-4'>
          {/* Stats */}
          <div className='flex gap-4'>
            <div className='flex items-center gap-2'>
              <div className='h-2 w-2 rounded-full bg-yellow-500' />
              <span className='text-sm'>{openAnnotations.length} Open</span>
            </div>
            <div className='flex items-center gap-2'>
              <div className='h-2 w-2 rounded-full bg-green-500' />
              <span className='text-sm'>
                {resolvedAnnotations.length} Resolved
              </span>
            </div>
          </div>

          {/* Create new annotation */}
          {canAnnotate && !isCreating && (
            <Button
              onClick={() => setIsCreating(true)}
              variant='outline'
              className='w-full gap-2'
            >
              <Plus className='h-4 w-4' />
              Add Annotation
            </Button>
          )}

          {isCreating && (
            <Card>
              <CardContent className='pt-4'>
                <div className='space-y-3'>
                  <Textarea
                    placeholder='Add your comment...'
                    value={newComment}
                    onChange={e => setNewComment(e.target.value)}
                    rows={3}
                  />
                  <div className='flex justify-end gap-2'>
                    <Button
                      variant='outline'
                      size='sm'
                      onClick={() => {
                        setIsCreating(false)
                        setNewComment('')
                      }}
                    >
                      Cancel
                    </Button>
                    <Button
                      size='sm'
                      onClick={handleCreateAnnotation}
                      disabled={!newComment.trim()}
                    >
                      Add Comment
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Annotations list */}
          <ScrollArea className='h-[400px]'>
            <div className='space-y-3'>
              {/* Open annotations */}
              {openAnnotations.map((annotation: Annotation) => (
                <Card
                  key={annotation.id}
                  className='border-l-4 border-l-yellow-500'
                >
                  <CardContent className='pt-4'>
                    <div className='space-y-3'>
                      {/* Header */}
                      <div className='flex items-start justify-between'>
                        <div className='flex items-center gap-2'>
                          <Avatar className='h-8 w-8'>
                            <AvatarImage
                              src={annotation.user.avatarUrl || undefined}
                            />
                            <AvatarFallback>
                              {annotation.user.name.charAt(0).toUpperCase()}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <p className='text-sm font-medium'>
                              {annotation.user.name}
                            </p>
                            <p className='text-muted-foreground text-xs'>
                              {format(
                                new Date(annotation.createdAt),
                                'MMM dd, HH:mm'
                              )}
                            </p>
                          </div>
                        </div>
                        <Badge variant='outline' className='gap-1'>
                          <div className='h-2 w-2 rounded-full bg-yellow-500' />
                          Open
                        </Badge>
                      </div>

                      {/* Comment */}
                      <p className='text-sm'>{annotation.comment}</p>

                      {/* Coordinates info */}
                      {annotation.coordinates && (
                        <div className='text-muted-foreground flex items-center gap-2 text-xs'>
                          <MessageSquare className='h-3 w-3' />
                          Position: {annotation.coordinates.x},{' '}
                          {annotation.coordinates.y}
                          {annotation.pageNumber &&
                            ` • Page ${annotation.pageNumber}`}
                          {annotation.lineNumber &&
                            ` • Line ${annotation.lineNumber}`}
                        </div>
                      )}

                      {/* Actions */}
                      <div className='flex items-center gap-2'>
                        <Button
                          variant='ghost'
                          size='sm'
                          onClick={() => setShowReplyInput(annotation.id)}
                          className='gap-1'
                        >
                          <Reply className='h-3 w-3' />
                          Reply
                        </Button>
                        {canAnnotate && (
                          <Button
                            variant='ghost'
                            size='sm'
                            onClick={() => handleResolve(annotation.id)}
                            className='gap-1 text-green-600 hover:text-green-700'
                          >
                            <CheckCircle className='h-3 w-3' />
                            Resolve
                          </Button>
                        )}
                      </div>

                      {/* Reply input */}
                      {showReplyInput === annotation.id && (
                        <div className='space-y-2 border-l-2 pl-4'>
                          <Textarea
                            placeholder='Write a reply...'
                            value={replyText}
                            onChange={e => setReplyText(e.target.value)}
                            rows={2}
                            className='text-sm'
                          />
                          <div className='flex gap-2'>
                            <Button
                              size='sm'
                              variant='outline'
                              onClick={() => {
                                setShowReplyInput(null)
                                setReplyText('')
                              }}
                            >
                              Cancel
                            </Button>
                            <Button
                              size='sm'
                              onClick={() => handleReply(annotation.id)}
                              disabled={!replyText.trim()}
                            >
                              Reply
                            </Button>
                          </div>
                        </div>
                      )}

                      {/* Replies */}
                      {annotation.replies && annotation.replies.length > 0 && (
                        <div className='space-y-2 border-l-2 pl-4'>
                          {annotation.replies.map(reply => (
                            <div key={reply.id} className='space-y-1'>
                              <div className='flex items-center gap-2'>
                                <Avatar className='h-6 w-6'>
                                  <AvatarImage
                                    src={reply.user.avatarUrl || undefined}
                                  />
                                  <AvatarFallback className='text-xs'>
                                    {reply.user.name.charAt(0).toUpperCase()}
                                  </AvatarFallback>
                                </Avatar>
                                <span className='text-xs font-medium'>
                                  {reply.user.name}
                                </span>
                                <span className='text-muted-foreground text-xs'>
                                  {format(
                                    new Date(reply.createdAt),
                                    'MMM dd, HH:mm'
                                  )}
                                </span>
                              </div>
                              <p className='pl-8 text-sm'>{reply.comment}</p>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}

              {/* Resolved annotations */}
              {resolvedAnnotations.length > 0 && (
                <>
                  <div className='text-muted-foreground text-xs font-medium'>
                    Resolved ({resolvedAnnotations.length})
                  </div>
                  {resolvedAnnotations.map((annotation: Annotation) => (
                    <Card
                      key={annotation.id}
                      className='border-l-4 border-l-green-500 opacity-60'
                    >
                      <CardContent className='pt-4'>
                        <div className='space-y-2'>
                          <div className='flex items-center justify-between'>
                            <div className='flex items-center gap-2'>
                              <Avatar className='h-6 w-6'>
                                <AvatarImage
                                  src={annotation.user.avatarUrl || undefined}
                                />
                                <AvatarFallback className='text-xs'>
                                  {annotation.user.name.charAt(0).toUpperCase()}
                                </AvatarFallback>
                              </Avatar>
                              <span className='text-xs font-medium'>
                                {annotation.user.name}
                              </span>
                            </div>
                            <Badge variant='outline' className='gap-1 text-xs'>
                              <CheckCircle className='h-3 w-3 text-green-500' />
                              Resolved
                            </Badge>
                          </div>
                          <p className='text-sm line-through'>
                            {annotation.comment}
                          </p>
                          {annotation.resolvedBy && annotation.resolvedAt && (
                            <p className='text-muted-foreground text-xs'>
                              Resolved by {annotation.resolvedBy.name} on{' '}
                              {format(
                                new Date(annotation.resolvedAt),
                                'MMM dd, HH:mm'
                              )}
                            </p>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </>
              )}

              {annotations.length === 0 && (
                <div className='flex flex-col items-center justify-center py-8 text-center'>
                  <MessageSquare className='text-muted-foreground h-12 w-12' />
                  <p className='mt-2 text-sm font-medium'>No annotations yet</p>
                  <p className='text-muted-foreground text-xs'>
                    Add annotations to discuss specific parts of this file
                  </p>
                </div>
              )}
            </div>
          </ScrollArea>
        </div>
      </DialogContent>
    </Dialog>
  )
}
