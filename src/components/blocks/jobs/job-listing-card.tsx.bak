'use client'

import { useRouter } from 'next/navigation'
import { useState } from 'react'

import { formatDistanceToNow } from 'date-fns'
import {
  Clock,
  DollarSign,
  Calendar,
  Star,
  Bookmark,
  BookmarkCheck,
  Eye,
  MessageSquare,
  TrendingUp
} from 'lucide-react'

import { UserAvatar } from '@/components/blocks/user-avatar'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card'
import { Skeleton } from '@/components/ui/skeleton'
import { apiEndpoints } from '@/config/api-endpoints'
import { appRoutes } from '@/config/app-routes'
import { useSession } from '@/hooks/use-session'
import { useToast } from '@/hooks/use-toast'
import { cn } from '@/lib'
import { api } from '@/lib/api/http-client'
import type { JobPostingWithRelations } from '@/lib/db/queries/jobs'

interface JobListingCardProps {
  job: JobPostingWithRelations
  showActions?: boolean
  featured?: boolean
  compact?: boolean
  onSave?: (jobId: number, saved: boolean) => void
  onApply?: (jobId: number) => void
}

export function JobListingCard({
  job,
  showActions = true,
  featured = false,
  compact = false,
  onSave,
  onApply
}: JobListingCardProps) {
  const router = useRouter()
  const { user } = useSession()
  const { toast } = useToast()
  const [isSaved, setIsSaved] = useState(false)
  const [isSaving, setIsSaving] = useState(false)

  const isOwner = user?.id === job.clientId
  const budgetDisplay =
    job.budgetType === 'fixed'
      ? `$${job.budgetMin}${job.budgetMax ? ` - $${job.budgetMax}` : ''}`
      : `$${job.budgetMin}${job.budgetMax ? ` - $${job.budgetMax}` : ''}/hr`

  const handleSave = async (e: React.MouseEvent) => {
    e.stopPropagation()
    if (!user) {
      toast({
        title: 'Authentication Required',
        description: 'Please sign in to save jobs',
        variant: 'destructive'
      })
      return
    }

    setIsSaving(true)
    try {
      const response = await api.post(apiEndpoints.jobs.save(job.id))
      if (response.success) {
        const newSavedState = !isSaved
        setIsSaved(newSavedState)
        onSave?.(job.id, newSavedState)
        toast({
          title: newSavedState ? 'Job Saved' : 'Job Unsaved',
          description: newSavedState
            ? 'Job has been added to your saved list'
            : 'Job has been removed from your saved list'
        })
      }
    } catch (_error) {
      console.error('Error saving job:', error)
      toast({
        title: 'Error',
        description: 'Failed to save job',
        variant: 'destructive'
      })
    } finally {
      setIsSaving(false)
    }
  }

  const handleApply = (e: React.MouseEvent) => {
    e.stopPropagation()
    if (!user) {
      toast({
        title: 'Authentication Required',
        description: 'Please sign in to apply for jobs',
        variant: 'destructive'
      })
      return
    }
    onApply?.(job.id)
  }

  const handleCardClick = () => {
    router.push(appRoutes.trades.jobs.detail(job.id))
  }

  const experienceLevelConfig = {
    entry: { label: 'Entry Level', color: 'text-green-600' },
    intermediate: { label: 'Intermediate', color: 'text-blue-600' },
    expert: { label: 'Expert', color: 'text-purple-600' }
  }

  const expConfig =
    experienceLevelConfig[
      job.experienceLevel as keyof typeof experienceLevelConfig
    ] || experienceLevelConfig.intermediate

  if (compact) {
    return (
      <Card
        className={cn(
          'cursor-pointer transition-all hover:shadow-md',
          featured && 'border-yellow-500 bg-yellow-50/50 dark:bg-yellow-950/10'
        )}
        onClick={handleCardClick}
      >
        <CardContent className='p-4'>
          <div className='flex items-start justify-between gap-4'>
            <div className='flex-1 space-y-2'>
              <div className='flex items-start justify-between'>
                <h3 className='line-clamp-1 font-semibold'>
                  {featured && (
                    <Star className='mr-1 inline h-4 w-4 text-yellow-500' />
                  )}
                  {job.title}
                </h3>
                {showActions && (
                  <Button
                    variant='ghost'
                    size='icon'
                    className='h-8 w-8 shrink-0'
                    onClick={handleSave}
                    disabled={isSaving}
                  >
                    {isSaved ? (
                      <BookmarkCheck className='text-primary h-4 w-4' />
                    ) : (
                      <Bookmark className='h-4 w-4' />
                    )}
                  </Button>
                )}
              </div>

              <div className='text-muted-foreground flex items-center gap-4 text-sm'>
                <span className='flex items-center gap-1'>
                  <DollarSign className='h-3 w-3' />
                  {budgetDisplay}
                </span>
                <span className='flex items-center gap-1'>
                  <Clock className='h-3 w-3' />
                  {formatDistanceToNow(job.createdAt)}
                </span>
                {job.bidCount > 0 && (
                  <span className='flex items-center gap-1'>
                    <MessageSquare className='h-3 w-3' />
                    {job.bidCount} bids
                  </span>
                )}
              </div>

              <div className='flex flex-wrap gap-1'>
                {job.skillsRequired?.slice(0, 3).map((skill: string) => (
                  <Badge key={skill} variant='secondary' className='text-xs'>
                    {skill}
                  </Badge>
                ))}
                {job.skillsRequired?.length > 3 && (
                  <Badge variant='outline' className='text-xs'>
                    +{job.skillsRequired.length - 3} more
                  </Badge>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card
      className={cn(
        'cursor-pointer transition-all hover:shadow-lg',
        featured &&
          'border-yellow-500 bg-gradient-to-r from-yellow-50/50 to-transparent dark:from-yellow-950/10'
      )}
      onClick={handleCardClick}
    >
      <CardHeader className='pb-4'>
        <div className='flex items-start justify-between'>
          <div className='flex-1'>
            <div className='mb-2 flex items-center gap-2'>
              {featured && (
                <Badge variant='default' className='bg-yellow-500'>
                  <Star className='mr-1 h-3 w-3' />
                  Featured
                </Badge>
              )}
              {job.isFeatured && (
                <Badge variant='secondary'>
                  <TrendingUp className='mr-1 h-3 w-3' />
                  Trending
                </Badge>
              )}
              <Badge variant='outline' className={expConfig.color}>
                {expConfig.label}
              </Badge>
            </div>

            <h3 className='mb-2 line-clamp-2 text-lg font-semibold'>
              {job.title}
            </h3>

            <div className='text-muted-foreground flex items-center gap-4 text-sm'>
              <div className='flex items-center gap-2'>
                <UserAvatar user={job.client} size='sm' />
                <span>{job.client?.name || 'Anonymous'}</span>
              </div>

              {job.client?.emailVerified && (
                <Badge variant='secondary' className='text-xs'>
                  Verified
                </Badge>
              )}

              <span className='flex items-center gap-1'>
                <Clock className='h-3 w-3' />
                {formatDistanceToNow(job.createdAt)}
              </span>
            </div>
          </div>

          {showActions && (
            <Button
              variant='ghost'
              size='icon'
              onClick={handleSave}
              disabled={isSaving}
            >
              {isSaved ? (
                <BookmarkCheck className='text-primary h-5 w-5' />
              ) : (
                <Bookmark className='h-5 w-5' />
              )}
            </Button>
          )}
        </div>
      </CardHeader>

      <CardContent className='space-y-4'>
        <p className='text-muted-foreground line-clamp-3 text-sm'>
          {job.description}
        </p>

        <div className='flex flex-wrap gap-4 text-sm'>
          <div className='flex items-center gap-2'>
            <DollarSign className='text-muted-foreground h-4 w-4' />
            <span className='font-medium'>{budgetDisplay}</span>
            <Badge variant='secondary' className='text-xs'>
              {job.budgetType}
            </Badge>
          </div>

          {job.projectDuration && (
            <div className='flex items-center gap-2'>
              <Calendar className='text-muted-foreground h-4 w-4' />
              <span>{job.projectDuration.replace(/_/g, ' ')}</span>
            </div>
          )}

          {job.deadline && (
            <div className='flex items-center gap-2'>
              <Clock className='text-muted-foreground h-4 w-4' />
              <span>Due {formatDistanceToNow(job.deadline)}</span>
            </div>
          )}
        </div>

        <div className='flex flex-wrap gap-2'>
          {job.skillsRequired?.map((skill: string) => (
            <Badge key={skill} variant='secondary'>
              {skill}
            </Badge>
          ))}
        </div>

        {job.milestones && job.milestones.length > 0 && (
          <div className='border-t pt-2'>
            <p className='mb-2 text-sm font-medium'>
              {job.milestones.length} Milestone
              {job.milestones.length > 1 ? 's' : ''}
            </p>
            <div className='space-y-1'>
              {job.milestones.slice(0, 2).map((milestone, idx) => (
                <div
                  key={milestone.id}
                  className='text-muted-foreground text-sm'
                >
                  {idx + 1}. {milestone.title} - ${milestone.amount}
                </div>
              ))}
              {job.milestones.length > 2 && (
                <p className='text-muted-foreground text-sm'>
                  +{job.milestones.length - 2} more milestones
                </p>
              )}
            </div>
          </div>
        )}
      </CardContent>

      <CardFooter className='pt-4'>
        <div className='flex w-full items-center justify-between'>
          <div className='text-muted-foreground flex items-center gap-4 text-sm'>
            <span className='flex items-center gap-1'>
              <Eye className='h-4 w-4' />
              {job.viewCount} views
            </span>
            <span className='flex items-center gap-1'>
              <MessageSquare className='h-4 w-4' />
              {job.bidCount} proposals
            </span>
            {job.avgBidAmount && (
              <span className='flex items-center gap-1'>
                <TrendingUp className='h-4 w-4' />
                Avg: ${job.avgBidAmount}
              </span>
            )}
          </div>

          {showActions && !isOwner && (
            <Button variant='default' size='sm' onClick={handleApply}>
              Apply Now
            </Button>
          )}

          {isOwner && <Badge variant='outline'>Your Job</Badge>}
        </div>
      </CardFooter>
    </Card>
  )
}

export function JobListingCardSkeleton({
  compact = false
}: {
  compact?: boolean
}) {
  if (compact) {
    return (
      <Card>
        <CardContent className='p-4'>
          <div className='space-y-2'>
            <Skeleton className='h-5 w-3/4' />
            <Skeleton className='h-4 w-1/2' />
            <div className='flex gap-2'>
              <Skeleton className='h-6 w-16' />
              <Skeleton className='h-6 w-16' />
              <Skeleton className='h-6 w-16' />
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <div className='space-y-2'>
          <Skeleton className='h-6 w-3/4' />
          <Skeleton className='h-4 w-1/2' />
        </div>
      </CardHeader>
      <CardContent className='space-y-4'>
        <Skeleton className='h-16 w-full' />
        <div className='flex gap-4'>
          <Skeleton className='h-4 w-24' />
          <Skeleton className='h-4 w-24' />
          <Skeleton className='h-4 w-24' />
        </div>
        <div className='flex gap-2'>
          <Skeleton className='h-6 w-16' />
          <Skeleton className='h-6 w-16' />
          <Skeleton className='h-6 w-16' />
        </div>
      </CardContent>
      <CardFooter>
        <div className='flex w-full justify-between'>
          <Skeleton className='h-4 w-32' />
          <Skeleton className='h-9 w-24' />
        </div>
      </CardFooter>
    </Card>
  )
}
