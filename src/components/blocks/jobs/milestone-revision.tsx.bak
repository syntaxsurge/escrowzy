'use client'

import { useState } from 'react'

import { AlertCircle, CheckSquare, FileText, Plus, X } from 'lucide-react'

import { Button } from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'

interface MilestoneRevisionProps {
  isOpen: boolean
  onClose: () => void
  milestoneId: number
  milestoneTitle: string
  freelancerName: string
  onRequestRevision: (data: {
    reason: string
    details: string
    requestedChanges?: string[]
  }) => Promise<void>
}

export function MilestoneRevision({
  isOpen,
  onClose,
  milestoneId,
  milestoneTitle,
  freelancerName,
  onRequestRevision
}: MilestoneRevisionProps) {
  const [reason, setReason] = useState('')
  const [details, setDetails] = useState('')
  const [requestedChanges, setRequestedChanges] = useState<string[]>([''])
  const [isSubmitting, setIsSubmitting] = useState(false)

  const addChangeRequest = () => {
    setRequestedChanges([...requestedChanges, ''])
  }

  const updateChangeRequest = (index: number, value: string) => {
    const updated = [...requestedChanges]
    updated[index] = value
    setRequestedChanges(updated)
  }

  const removeChangeRequest = (index: number) => {
    if (requestedChanges.length > 1) {
      setRequestedChanges(requestedChanges.filter((_, i) => i !== index))
    }
  }

  const handleSubmit = async () => {
    if (!reason.trim() || reason.trim().length < 10) {
      alert('Please provide a detailed reason (at least 10 characters)')
      return
    }

    if (!details.trim()) {
      alert('Please provide details about the required changes')
      return
    }

    setIsSubmitting(true)
    try {
      const filteredChanges = requestedChanges.filter(c => c.trim())

      await onRequestRevision({
        reason: reason.trim(),
        details: details.trim(),
        requestedChanges:
          filteredChanges.length > 0 ? filteredChanges : undefined
      })

      // Reset form
      setReason('')
      setDetails('')
      setRequestedChanges([''])
      onClose()
    } catch (_error) {
      console.error('Error requesting revision:', error)
      alert('Failed to request revision. Please try again.')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className='sm:max-w-[600px]'>
        <DialogHeader>
          <DialogTitle>Request Revision</DialogTitle>
          <DialogDescription>
            Request changes to "{milestoneTitle}" from {freelancerName}
          </DialogDescription>
        </DialogHeader>

        <div className='space-y-4 py-4'>
          <div className='rounded-lg border border-amber-200 bg-amber-50 p-3'>
            <p className='text-sm text-amber-900'>
              <AlertCircle className='mr-1 inline-block h-4 w-4' />
              Please be specific and constructive with your feedback to help the
              freelancer understand what needs to be changed.
            </p>
          </div>

          {/* Reason for Revision */}
          <div className='space-y-2'>
            <Label htmlFor='reason'>
              Reason for Revision <span className='text-red-500'>*</span>
            </Label>
            <Input
              id='reason'
              placeholder='e.g., Missing required features, Quality issues, etc.'
              value={reason}
              onChange={e => setReason(e.target.value)}
            />
            <p className='text-muted-foreground text-xs'>
              Briefly explain why you're requesting a revision (min. 10
              characters)
            </p>
          </div>

          {/* Detailed Description */}
          <div className='space-y-2'>
            <Label htmlFor='details'>
              Detailed Description <span className='text-red-500'>*</span>
            </Label>
            <Textarea
              id='details'
              placeholder='Provide a detailed explanation of what needs to be changed...'
              value={details}
              onChange={e => setDetails(e.target.value)}
              rows={4}
            />
            <p className='text-muted-foreground text-xs'>
              Be as specific as possible to help the freelancer understand your
              requirements
            </p>
          </div>

          {/* Requested Changes Checklist */}
          <div className='space-y-2'>
            <Label>Specific Changes Required (Optional)</Label>
            <div className='space-y-2'>
              {requestedChanges.map((change, index) => (
                <div key={index} className='flex gap-2'>
                  <div className='flex items-center'>
                    <CheckSquare className='text-muted-foreground mr-2 h-4 w-4' />
                  </div>
                  <Input
                    placeholder='e.g., Fix responsive design on mobile devices'
                    value={change}
                    onChange={e => updateChangeRequest(index, e.target.value)}
                    className='flex-1'
                  />
                  {requestedChanges.length > 1 && (
                    <Button
                      type='button'
                      variant='ghost'
                      size='icon'
                      onClick={() => removeChangeRequest(index)}
                    >
                      <X className='h-4 w-4' />
                    </Button>
                  )}
                </div>
              ))}
            </div>
            <Button
              type='button'
              variant='outline'
              size='sm'
              onClick={addChangeRequest}
              className='w-full'
            >
              <Plus className='mr-2 h-4 w-4' />
              Add Another Change Request
            </Button>
          </div>

          {/* Revision History Note */}
          <div className='bg-muted rounded-lg p-3'>
            <div className='flex items-start gap-2'>
              <FileText className='text-muted-foreground mt-0.5 h-4 w-4' />
              <div className='text-sm'>
                <p className='font-medium'>Revision History</p>
                <p className='text-muted-foreground'>
                  This will be the first revision request for this milestone.
                  The freelancer will be notified immediately.
                </p>
              </div>
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button variant='outline' onClick={onClose} disabled={isSubmitting}>
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={isSubmitting}
            variant='destructive'
          >
            {isSubmitting ? 'Requesting...' : 'Request Revision'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
