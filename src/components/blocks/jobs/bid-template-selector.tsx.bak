'use client'

import { useEffect, useState } from 'react'

import {
  AlertCircle,
  BookOpen,
  Check,
  Edit,
  FileText,
  Plus,
  Save,
  Star,
  Trash2
} from 'lucide-react'
import { toast } from 'sonner'
import useSWR, { mutate } from 'swr'

import { Alert, AlertDescription } from '@/components/ui/alert'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader } from '@/components/ui/card'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Textarea } from '@/components/ui/textarea'
import { api } from '@/lib/api/http-client'
import type { BidTemplate } from '@/lib/db/schema'

interface BidTemplateSelectorProps {
  onSelectTemplate: (template: BidTemplate) => void
}

export function BidTemplateSelector({
  onSelectTemplate
}: BidTemplateSelectorProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isCreating, setIsCreating] = useState(false)
  const [editingTemplate, setEditingTemplate] = useState<BidTemplate | null>(
    null
  )
  const [selectedTemplateId, setSelectedTemplateId] = useState<number | null>(
    null
  )

  // Form state for new/edit template
  const [templateForm, setTemplateForm] = useState({
    name: '',
    proposalText: '',
    coverLetter: '',
    isDefault: false
  })

  // Fetch templates
  const { data: templates = [], isLoading } = useSWR<BidTemplate[]>(
    '/api/bid-templates',
    async (url: string) => {
      const response = await api.get(url)
      return response.success ? (response as any).templates : []
    }
  )

  // Load default template on mount
  useEffect(() => {
    const defaultTemplate = templates.find(t => t.isDefault)
    if (defaultTemplate && !selectedTemplateId) {
      setSelectedTemplateId(defaultTemplate.id)
    }
  }, [templates, selectedTemplateId])

  const handleCreateTemplate = async () => {
    try {
      const response = await api.post('/api/bid-templates', templateForm)

      if (response.success) {
        toast.success('Template created successfully')
        await mutate('/api/bid-templates')
        setIsCreating(false)
        setTemplateForm({
          name: '',
          proposalText: '',
          coverLetter: '',
          isDefault: false
        })
      } else {
        toast.error(response.error || 'Failed to create template')
      }
    } catch (_error) {
      toast.error('Failed to create template')
    }
  }

  const handleUpdateTemplate = async () => {
    if (!editingTemplate) return

    try {
      const response = await api.patch('/api/bid-templates', {
        id: editingTemplate.id,
        ...templateForm
      })

      if (response.success) {
        toast.success('Template updated successfully')
        await mutate('/api/bid-templates')
        setEditingTemplate(null)
        setTemplateForm({
          name: '',
          proposalText: '',
          coverLetter: '',
          isDefault: false
        })
      } else {
        toast.error(response.error || 'Failed to update template')
      }
    } catch (_error) {
      toast.error('Failed to update template')
    }
  }

  const handleDeleteTemplate = async (id: number) => {
    if (!confirm('Are you sure you want to delete this template?')) return

    try {
      const response = await api.delete(`/api/bid-templates?id=${id}`)

      if (response.success) {
        toast.success('Template deleted successfully')
        await mutate('/api/bid-templates')
        if (selectedTemplateId === id) {
          setSelectedTemplateId(null)
        }
      } else {
        toast.error(response.error || 'Failed to delete template')
      }
    } catch (_error) {
      toast.error('Failed to delete template')
    }
  }

  const handleSetDefault = async (id: number) => {
    try {
      const response = await api.patch('/api/bid-templates', {
        id,
        isDefault: true
      })

      if (response.success) {
        toast.success('Default template updated')
        await mutate('/api/bid-templates')
      } else {
        toast.error(response.error || 'Failed to set default template')
      }
    } catch (_error) {
      toast.error('Failed to set default template')
    }
  }

  const handleApplyTemplate = () => {
    const selectedTemplate = templates.find(t => t.id === selectedTemplateId)
    if (selectedTemplate) {
      onSelectTemplate(selectedTemplate)

      // Update usage count
      api.patch('/api/bid-templates', {
        id: selectedTemplate.id,
        usageCount: selectedTemplate.usageCount + 1
      })

      setIsOpen(false)
    }
  }

  const startEditing = (template: BidTemplate) => {
    setEditingTemplate(template)
    setTemplateForm({
      name: template.name,
      proposalText: template.proposalText,
      coverLetter: template.coverLetter || '',
      isDefault: template.isDefault
    })
    setIsCreating(false)
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant='outline' size='sm'>
          <BookOpen className='mr-2 h-4 w-4' />
          Use Template
        </Button>
      </DialogTrigger>
      <DialogContent className='max-w-4xl'>
        <DialogHeader>
          <DialogTitle>Proposal Templates</DialogTitle>
          <DialogDescription>
            Select a template to quickly fill your proposal or create a new one
          </DialogDescription>
        </DialogHeader>

        <div className='grid grid-cols-2 gap-4'>
          {/* Template List */}
          <div className='space-y-2'>
            <div className='flex items-center justify-between'>
              <h3 className='text-sm font-medium'>Your Templates</h3>
              <Button
                size='sm'
                variant='ghost'
                onClick={() => {
                  setIsCreating(true)
                  setEditingTemplate(null)
                  setTemplateForm({
                    name: '',
                    proposalText: '',
                    coverLetter: '',
                    isDefault: false
                  })
                }}
              >
                <Plus className='h-4 w-4' />
              </Button>
            </div>

            <ScrollArea className='h-[400px] rounded-lg border p-2'>
              {isLoading ? (
                <div className='space-y-2'>
                  {[1, 2, 3].map(i => (
                    <div
                      key={i}
                      className='bg-muted h-20 animate-pulse rounded-lg'
                    />
                  ))}
                </div>
              ) : templates.length === 0 ? (
                <div className='flex h-full items-center justify-center p-4 text-center'>
                  <div>
                    <FileText className='text-muted-foreground mx-auto mb-2 h-8 w-8' />
                    <p className='text-muted-foreground text-sm'>
                      No templates yet
                    </p>
                    <Button
                      size='sm'
                      variant='link'
                      onClick={() => setIsCreating(true)}
                      className='mt-2'
                    >
                      Create your first template
                    </Button>
                  </div>
                </div>
              ) : (
                <RadioGroup
                  value={selectedTemplateId?.toString()}
                  onValueChange={value =>
                    setSelectedTemplateId(parseInt(value))
                  }
                >
                  {templates.map(template => (
                    <Card
                      key={template.id}
                      className={`mb-2 cursor-pointer transition-colors ${
                        selectedTemplateId === template.id
                          ? 'border-primary'
                          : ''
                      }`}
                    >
                      <CardHeader className='p-3'>
                        <div className='flex items-start justify-between'>
                          <div className='flex items-start gap-2'>
                            <RadioGroupItem
                              value={template.id.toString()}
                              id={`template-${template.id}`}
                            />
                            <div className='flex-1'>
                              <Label
                                htmlFor={`template-${template.id}`}
                                className='cursor-pointer'
                              >
                                <div className='flex items-center gap-2'>
                                  <span className='font-medium'>
                                    {template.name}
                                  </span>
                                  {template.isDefault && (
                                    <Star className='h-3 w-3 fill-yellow-500 text-yellow-500' />
                                  )}
                                </div>
                              </Label>
                              <p className='text-muted-foreground mt-1 text-xs'>
                                Used {template.usageCount} times
                              </p>
                            </div>
                          </div>
                          <div className='flex gap-1'>
                            <Button
                              size='sm'
                              variant='ghost'
                              onClick={e => {
                                e.stopPropagation()
                                startEditing(template)
                              }}
                            >
                              <Edit className='h-3 w-3' />
                            </Button>
                            <Button
                              size='sm'
                              variant='ghost'
                              onClick={e => {
                                e.stopPropagation()
                                handleDeleteTemplate(template.id)
                              }}
                            >
                              <Trash2 className='h-3 w-3' />
                            </Button>
                          </div>
                        </div>
                      </CardHeader>
                    </Card>
                  ))}
                </RadioGroup>
              )}
            </ScrollArea>
          </div>

          {/* Template Editor/Preview */}
          <div className='space-y-2'>
            <h3 className='text-sm font-medium'>
              {isCreating
                ? 'Create Template'
                : editingTemplate
                  ? 'Edit Template'
                  : 'Preview'}
            </h3>

            {isCreating || editingTemplate ? (
              <Card className='h-[400px] overflow-y-auto'>
                <CardContent className='space-y-4 p-4'>
                  <div>
                    <Label htmlFor='template-name'>Template Name</Label>
                    <Input
                      id='template-name'
                      value={templateForm.name}
                      onChange={e =>
                        setTemplateForm({
                          ...templateForm,
                          name: e.target.value
                        })
                      }
                      placeholder='e.g., Web Development Template'
                    />
                  </div>

                  <div>
                    <Label htmlFor='proposal-text'>Proposal Text</Label>
                    <Textarea
                      id='proposal-text'
                      value={templateForm.proposalText}
                      onChange={e =>
                        setTemplateForm({
                          ...templateForm,
                          proposalText: e.target.value
                        })
                      }
                      placeholder='Your standard proposal text...'
                      rows={6}
                    />
                  </div>

                  <div>
                    <Label htmlFor='cover-letter'>
                      Cover Letter (Optional)
                    </Label>
                    <Textarea
                      id='cover-letter'
                      value={templateForm.coverLetter}
                      onChange={e =>
                        setTemplateForm({
                          ...templateForm,
                          coverLetter: e.target.value
                        })
                      }
                      placeholder='Optional cover letter template...'
                      rows={4}
                    />
                  </div>

                  <div className='flex items-center gap-2'>
                    <input
                      type='checkbox'
                      id='is-default'
                      checked={templateForm.isDefault}
                      onChange={e =>
                        setTemplateForm({
                          ...templateForm,
                          isDefault: e.target.checked
                        })
                      }
                    />
                    <Label htmlFor='is-default'>Set as default template</Label>
                  </div>

                  <div className='flex gap-2'>
                    <Button
                      onClick={
                        editingTemplate
                          ? handleUpdateTemplate
                          : handleCreateTemplate
                      }
                      disabled={
                        !templateForm.name || !templateForm.proposalText
                      }
                    >
                      <Save className='mr-2 h-4 w-4' />
                      {editingTemplate ? 'Update' : 'Create'}
                    </Button>
                    <Button
                      variant='outline'
                      onClick={() => {
                        setIsCreating(false)
                        setEditingTemplate(null)
                        setTemplateForm({
                          name: '',
                          proposalText: '',
                          coverLetter: '',
                          isDefault: false
                        })
                      }}
                    >
                      Cancel
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ) : selectedTemplateId ? (
              <Card className='h-[400px] overflow-y-auto'>
                <CardContent className='space-y-4 p-4'>
                  {(() => {
                    const selected = templates.find(
                      t => t.id === selectedTemplateId
                    )
                    if (!selected) return null

                    return (
                      <>
                        <div>
                          <h4 className='mb-2 text-sm font-medium'>
                            Proposal Text
                          </h4>
                          <div className='bg-muted rounded-lg p-3 text-sm whitespace-pre-wrap'>
                            {selected.proposalText}
                          </div>
                        </div>

                        {selected.coverLetter && (
                          <div>
                            <h4 className='mb-2 text-sm font-medium'>
                              Cover Letter
                            </h4>
                            <div className='bg-muted rounded-lg p-3 text-sm whitespace-pre-wrap'>
                              {selected.coverLetter}
                            </div>
                          </div>
                        )}

                        {!selected.isDefault && (
                          <Button
                            size='sm'
                            variant='outline'
                            onClick={() => handleSetDefault(selected.id)}
                          >
                            <Star className='mr-2 h-4 w-4' />
                            Set as Default
                          </Button>
                        )}
                      </>
                    )
                  })()}
                </CardContent>
              </Card>
            ) : (
              <Alert>
                <AlertCircle className='h-4 w-4' />
                <AlertDescription>
                  Select a template to preview or create a new one
                </AlertDescription>
              </Alert>
            )}
          </div>
        </div>

        <DialogFooter>
          <Button variant='outline' onClick={() => setIsOpen(false)}>
            Cancel
          </Button>
          <Button
            onClick={handleApplyTemplate}
            disabled={!selectedTemplateId || isCreating || !!editingTemplate}
          >
            <Check className='mr-2 h-4 w-4' />
            Apply Template
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
