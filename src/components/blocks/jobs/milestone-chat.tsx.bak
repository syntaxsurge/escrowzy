'use client'

import { useEffect, useRef, useState } from 'react'

import { format } from 'date-fns'
import { FileText, Paperclip, Send } from 'lucide-react'

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { pusherClient } from '@/lib/pusher-client'
import { cn } from '@/lib/utils'

interface Message {
  id: number
  milestoneId: number
  userId: number | null
  message: string
  attachments?: any[]
  isSystem: boolean
  systemType?: string
  createdAt: string
  user?: {
    id: number
    name: string | null
    email: string
    image: string | null
  }
}

interface MilestoneChatProps {
  milestoneId: number
  milestoneTitle: string
  currentUserId: number
  onSendMessage: (message: string, attachments?: any[]) => Promise<void>
  initialMessages?: Message[]
}

export function MilestoneChat({
  milestoneId,
  milestoneTitle,
  currentUserId,
  onSendMessage,
  initialMessages = []
}: MilestoneChatProps) {
  const [messages, setMessages] = useState<Message[]>(initialMessages)
  const [newMessage, setNewMessage] = useState('')
  const [isSending, setIsSending] = useState(false)
  const [attachments, setAttachments] = useState<any[]>([])
  const scrollAreaRef = useRef<HTMLDivElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    if (!pusherClient) return

    const channel = pusherClient.subscribe(`milestone-${milestoneId}`)

    channel.bind('new-message', (data: Message) => {
      setMessages(prev => [...prev, data])
      scrollToBottom()
    })

    channel.bind('system-message', (data: Message) => {
      setMessages(prev => [...prev, { ...data, isSystem: true }])
      scrollToBottom()
    })

    return () => {
      pusherClient?.unsubscribe(`milestone-${milestoneId}`)
    }
  }, [milestoneId])

  const scrollToBottom = () => {
    if (scrollAreaRef.current) {
      const scrollContainer = scrollAreaRef.current.querySelector(
        '[data-radix-scroll-area-viewport]'
      )
      if (scrollContainer) {
        scrollContainer.scrollTop = scrollContainer.scrollHeight
      }
    }
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSend = async () => {
    if (!newMessage.trim() && attachments.length === 0) return

    setIsSending(true)
    try {
      await onSendMessage(
        newMessage,
        attachments.length > 0 ? attachments : undefined
      )
      setNewMessage('')
      setAttachments([])
    } catch (_error) {
      console.error('Error sending message:', error)
    } finally {
      setIsSending(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSend()
    }
  }

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files).map(file => ({
        name: file.name,
        size: file.size,
        type: file.type,
        url: URL.createObjectURL(file) // In production, upload to cloud storage
      }))
      setAttachments([...attachments, ...newFiles])
    }
  }

  const getInitials = (name: string | null, email: string) => {
    if (name) {
      return name
        .split(' ')
        .map(n => n[0])
        .join('')
        .toUpperCase()
        .slice(0, 2)
    }
    return email.slice(0, 2).toUpperCase()
  }

  const renderMessage = (message: Message) => {
    const isCurrentUser = message.userId === currentUserId

    if (message.isSystem) {
      return (
        <div key={message.id} className='flex justify-center py-2'>
          <div className='bg-muted text-muted-foreground rounded-full px-3 py-1 text-xs'>
            {message.message}
          </div>
        </div>
      )
    }

    return (
      <div
        key={message.id}
        className={cn(
          'flex gap-3 py-3',
          isCurrentUser ? 'flex-row-reverse' : 'flex-row'
        )}
      >
        <Avatar className='h-8 w-8'>
          <AvatarImage src={message.user?.image || undefined} />
          <AvatarFallback>
            {getInitials(
              message.user?.name || null,
              message.user?.email || 'U'
            )}
          </AvatarFallback>
        </Avatar>

        <div
          className={cn('flex flex-col gap-1', isCurrentUser && 'items-end')}
        >
          <div className='flex items-center gap-2'>
            <span className='text-muted-foreground text-xs'>
              {message.user?.name || message.user?.email}
            </span>
            <span className='text-muted-foreground text-xs'>
              {format(new Date(message.createdAt), 'HH:mm')}
            </span>
          </div>

          <div
            className={cn(
              'max-w-[300px] rounded-lg px-3 py-2',
              isCurrentUser ? 'bg-primary text-primary-foreground' : 'bg-muted'
            )}
          >
            <p className='text-sm break-words whitespace-pre-wrap'>
              {message.message}
            </p>
          </div>

          {message.attachments && message.attachments.length > 0 && (
            <div className='mt-1 flex flex-col gap-1'>
              {message.attachments.map((attachment: any, index) => (
                <a
                  key={index}
                  href={attachment.url}
                  target='_blank'
                  rel='noopener noreferrer'
                  className={cn(
                    'flex items-center gap-1 text-xs hover:underline',
                    isCurrentUser ? 'text-primary' : 'text-muted-foreground'
                  )}
                >
                  <FileText className='h-3 w-3' />
                  {attachment.name}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>
    )
  }

  return (
    <Card className='flex h-[500px] flex-col'>
      <CardHeader className='border-b px-4 py-3'>
        <CardTitle className='text-base'>
          Milestone Discussion: {milestoneTitle}
        </CardTitle>
      </CardHeader>

      <ScrollArea ref={scrollAreaRef} className='flex-1 px-4'>
        <div className='py-4'>
          {messages.length === 0 ? (
            <div className='text-muted-foreground py-8 text-center text-sm'>
              No messages yet. Start the conversation!
            </div>
          ) : (
            messages.map(renderMessage)
          )}
        </div>
      </ScrollArea>

      <CardContent className='border-t p-4'>
        {attachments.length > 0 && (
          <div className='mb-2 flex flex-wrap gap-2'>
            {attachments.map((file, index) => (
              <div
                key={index}
                className='bg-muted flex items-center gap-1 rounded px-2 py-1 text-xs'
              >
                <Paperclip className='h-3 w-3' />
                {file.name}
                <button
                  onClick={() =>
                    setAttachments(attachments.filter((_, i) => i !== index))
                  }
                  className='hover:text-destructive ml-1'
                >
                  Ã—
                </button>
              </div>
            ))}
          </div>
        )}

        <div className='flex gap-2'>
          <Button
            type='button'
            variant='ghost'
            size='icon'
            onClick={() => fileInputRef.current?.click()}
            disabled={isSending}
          >
            <Paperclip className='h-4 w-4' />
          </Button>
          <input
            ref={fileInputRef}
            type='file'
            multiple
            className='hidden'
            onChange={handleFileSelect}
          />

          <Input
            placeholder='Type a message...'
            value={newMessage}
            onChange={e => setNewMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            disabled={isSending}
            className='flex-1'
          />

          <Button
            onClick={handleSend}
            disabled={
              isSending || (!newMessage.trim() && attachments.length === 0)
            }
            size='icon'
          >
            <Send className='h-4 w-4' />
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
