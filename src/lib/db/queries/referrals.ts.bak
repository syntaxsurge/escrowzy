import 'server-only'

import { eq } from 'drizzle-orm'

import { db } from '../drizzle'
import { users, userGameData } from '../schema'

export interface ReferralProgram {
  referrerId: number
  referralCode: string
  totalReferrals: number
  activeReferrals: number
  pendingRewards: number
  claimedRewards: number
  tierLevel: 'bronze' | 'silver' | 'gold' | 'platinum'
  lifetimeEarnings: number
}

export interface ReferralReward {
  type: 'signup' | 'first_job' | 'first_review' | 'milestone'
  amount: number
  description: string
  claimable: boolean
}

const REFERRAL_REWARDS = {
  signup: { xp: 100, description: 'New user signup' },
  emailVerified: { xp: 50, description: 'Referral verified email' },
  firstJob: { xp: 200, description: 'Referral completed first job' },
  firstReview: { xp: 150, description: 'Referral submitted first review' },
  milestone5: { xp: 500, description: '5 active referrals' },
  milestone10: { xp: 1000, description: '10 active referrals' },
  milestone25: { xp: 2500, description: '25 active referrals' },
  milestone50: { xp: 5000, description: '50 active referrals' }
}

export async function generateReferralCode(userId: number): Promise<string> {
  // Generate a unique referral code based on user ID and random string
  const randomPart = Math.random().toString(36).substring(2, 8).toUpperCase()
  const code = `REF${userId}${randomPart}`

  // Store in user's game data
  const [userData] = await db
    .select()
    .from(userGameData)
    .where(eq(userGameData.userId, userId))
    .limit(1)

  const currentStats = (userData?.stats || {}) as any
  const updatedStats = {
    ...currentStats,
    referral: {
      ...currentStats.referral,
      code,
      generatedAt: new Date().toISOString()
    }
  }

  await db
    .update(userGameData)
    .set({
      stats: updatedStats,
      updatedAt: new Date()
    })
    .where(eq(userGameData.userId, userId))

  return code
}

export async function getReferralCode(userId: number): Promise<string | null> {
  const [userData] = await db
    .select()
    .from(userGameData)
    .where(eq(userGameData.userId, userId))
    .limit(1)

  const stats = (userData?.stats || {}) as any

  if (stats.referral?.code) {
    return stats.referral.code
  }

  // Generate new code if doesn't exist
  return await generateReferralCode(userId)
}

export async function trackReferral(
  referralCode: string,
  newUserId: number
): Promise<{ success: boolean; referrerId?: number; message: string }> {
  try {
    // Find the referrer by code
    const allUsers = await db
      .select({
        user: users,
        gameData: userGameData
      })
      .from(users)
      .leftJoin(userGameData, eq(users.id, userGameData.userId))

    const referrer = allUsers.find(u => {
      const stats = (u.gameData?.stats || {}) as any
      return stats.referral?.code === referralCode
    })

    if (!referrer) {
      return { success: false, message: 'Invalid referral code' }
    }

    // Store referral relationship
    const [newUserData] = await db
      .select()
      .from(userGameData)
      .where(eq(userGameData.userId, newUserId))
      .limit(1)

    const currentStats = (newUserData?.stats || {}) as any
    const updatedStats = {
      ...currentStats,
      referredBy: {
        userId: referrer.user.id,
        code: referralCode,
        joinedAt: new Date().toISOString()
      }
    }

    await db
      .update(userGameData)
      .set({
        stats: updatedStats,
        updatedAt: new Date()
      })
      .where(eq(userGameData.userId, newUserId))

    // Update referrer's stats
    await addReferralToReferrer(referrer.user.id, newUserId)

    return {
      success: true,
      referrerId: referrer.user.id,
      message: 'Referral tracked successfully'
    }
  } catch (_error) {
    console.error('Error tracking referral:', error)
    return { success: false, message: 'Failed to track referral' }
  }
}

async function addReferralToReferrer(
  referrerId: number,
  referredUserId: number
): Promise<void> {
  const [userData] = await db
    .select()
    .from(userGameData)
    .where(eq(userGameData.userId, referrerId))
    .limit(1)

  const currentStats = (userData?.stats || {}) as any
  const referralStats = currentStats.referral || {}
  const referrals = referralStats.referrals || []

  referrals.push({
    userId: referredUserId,
    joinedAt: new Date().toISOString(),
    status: 'pending',
    rewards: {
      signup: { claimed: false, amount: REFERRAL_REWARDS.signup.xp }
    }
  })

  const updatedStats = {
    ...currentStats,
    referral: {
      ...referralStats,
      referrals,
      totalReferrals: referrals.length,
      pendingRewards: calculatePendingRewards(referrals)
    }
  }

  await db
    .update(userGameData)
    .set({
      stats: updatedStats,
      updatedAt: new Date()
    })
    .where(eq(userGameData.userId, referrerId))
}

function calculatePendingRewards(referrals: any[]): number {
  let total = 0

  for (const referral of referrals) {
    if (referral.rewards) {
      for (const reward of Object.values(referral.rewards)) {
        const r = reward as any
        if (!r.claimed) {
          total += r.amount
        }
      }
    }
  }

  return total
}

export async function getReferralProgram(
  userId: number
): Promise<ReferralProgram> {
  const [userData] = await db
    .select()
    .from(userGameData)
    .where(eq(userGameData.userId, userId))
    .limit(1)

  const stats = (userData?.stats || {}) as any
  const referralStats = stats.referral || {}
  const referrals = referralStats.referrals || []

  const activeReferrals = referrals.filter(
    (r: any) => r.status === 'active'
  ).length
  const totalReferrals = referrals.length
  const pendingRewards = calculatePendingRewards(referrals)
  const claimedRewards = referralStats.claimedRewards || 0

  // Determine tier based on active referrals
  let tierLevel: 'bronze' | 'silver' | 'gold' | 'platinum' = 'bronze'
  if (activeReferrals >= 50) tierLevel = 'platinum'
  else if (activeReferrals >= 25) tierLevel = 'gold'
  else if (activeReferrals >= 10) tierLevel = 'silver'

  return {
    referrerId: userId,
    referralCode: referralStats.code || (await generateReferralCode(userId)),
    totalReferrals,
    activeReferrals,
    pendingRewards,
    claimedRewards,
    tierLevel,
    lifetimeEarnings: claimedRewards + pendingRewards
  }
}

export async function claimReferralReward(
  userId: number,
  referredUserId: number,
  rewardType: string
): Promise<{ success: boolean; xpAwarded?: number; message: string }> {
  try {
    const [userData] = await db
      .select()
      .from(userGameData)
      .where(eq(userGameData.userId, userId))
      .limit(1)

    const currentStats = (userData?.stats || {}) as any
    const referralStats = currentStats.referral || {}
    const referrals = referralStats.referrals || []

    const referralIndex = referrals.findIndex(
      (r: any) => r.userId === referredUserId
    )
    if (referralIndex === -1) {
      return { success: false, message: 'Referral not found' }
    }

    const referral = referrals[referralIndex]
    const reward = referral.rewards?.[rewardType]

    if (!reward) {
      return { success: false, message: 'Reward not found' }
    }

    if (reward.claimed) {
      return { success: false, message: 'Reward already claimed' }
    }

    // Mark reward as claimed
    referral.rewards[rewardType].claimed = true
    referral.rewards[rewardType].claimedAt = new Date().toISOString()

    const updatedStats = {
      ...currentStats,
      referral: {
        ...referralStats,
        referrals,
        claimedRewards: (referralStats.claimedRewards || 0) + reward.amount,
        pendingRewards: calculatePendingRewards(referrals)
      }
    }

    await db
      .update(userGameData)
      .set({
        stats: updatedStats,
        updatedAt: new Date()
      })
      .where(eq(userGameData.userId, userId))

    return {
      success: true,
      xpAwarded: reward.amount,
      message: `Claimed ${reward.amount} XP reward`
    }
  } catch (_error) {
    console.error('Error claiming referral reward:', error)
    return { success: false, message: 'Failed to claim reward' }
  }
}

export async function updateReferralStatus(
  referredUserId: number,
  status: 'pending' | 'active' | 'inactive'
): Promise<void> {
  // Get the referred user's data to find referrer
  const [referredUserData] = await db
    .select()
    .from(userGameData)
    .where(eq(userGameData.userId, referredUserId))
    .limit(1)

  const stats = (referredUserData?.stats || {}) as any
  const referrerInfo = stats.referredBy

  if (!referrerInfo?.userId) {
    return
  }

  // Update referrer's stats
  const [referrerData] = await db
    .select()
    .from(userGameData)
    .where(eq(userGameData.userId, referrerInfo.userId))
    .limit(1)

  const referrerStats = (referrerData?.stats || {}) as any
  const referralStats = referrerStats.referral || {}
  const referrals = referralStats.referrals || []

  const referralIndex = referrals.findIndex(
    (r: any) => r.userId === referredUserId
  )
  if (referralIndex !== -1) {
    referrals[referralIndex].status = status
    referrals[referralIndex].updatedAt = new Date().toISOString()

    const updatedStats = {
      ...referrerStats,
      referral: {
        ...referralStats,
        referrals,
        activeReferrals: referrals.filter((r: any) => r.status === 'active')
          .length
      }
    }

    await db
      .update(userGameData)
      .set({
        stats: updatedStats,
        updatedAt: new Date()
      })
      .where(eq(userGameData.userId, referrerInfo.userId))
  }
}

export async function getReferralLeaderboard(limit: number = 10): Promise<
  Array<{
    userId: number
    name: string | null
    referralCode: string
    totalReferrals: number
    activeReferrals: number
    tierLevel: string
  }>
> {
  const allUsers = await db
    .select({
      user: users,
      gameData: userGameData
    })
    .from(users)
    .leftJoin(userGameData, eq(users.id, userGameData.userId))

  const leaderboard = allUsers
    .map(({ user, gameData }) => {
      const stats = (gameData?.stats || {}) as any
      const referralStats = stats.referral || {}
      const referrals = referralStats.referrals || []
      const activeReferrals = referrals.filter(
        (r: any) => r.status === 'active'
      ).length

      let tierLevel = 'bronze'
      if (activeReferrals >= 50) tierLevel = 'platinum'
      else if (activeReferrals >= 25) tierLevel = 'gold'
      else if (activeReferrals >= 10) tierLevel = 'silver'

      return {
        userId: user.id,
        name: user.name,
        referralCode: referralStats.code || '',
        totalReferrals: referrals.length,
        activeReferrals,
        tierLevel
      }
    })
    .filter(u => u.totalReferrals > 0)
    .sort((a, b) => b.activeReferrals - a.activeReferrals)
    .slice(0, limit)

  return leaderboard
}
